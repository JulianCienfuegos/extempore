;;; bpic.xtm:examples -- example of the pic code in use

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libcpic2.dylib

;;; Commentary:

;; example file for running an electromagnetic PIC particle
;; simulation. See also the pic.xtm example in this same directory for
;; electrostatic pic codes

;;; Code:

(sys:load "libs/external/pic/bpic.xtm")

;; to start the simulation (an OpenGL canvas window should pop up
;; somewhere)
(run-bpic 1/30)

;; this function redistributes particles, uniformly in space and with gaussia
(bind-func particle_redistribute
  (lambda (np:i32 nx:i32 ny:i32)
    (doloop (i np)
      (pset! part (+ (* i 5) 0) (random 0. (convert nx)))
      (pset! part (+ (* i 5) 1) (random 0. (convert ny)))
      (pset! part (+ (* i 5) 2) (randn))
      (pset! part (+ (* i 5) 3) (randn))
      (pset! part (+ (* i 5) 4) (randn)))))

;; call the reset function - see that the top-level local variables
;; (which live in the bpic_step closure) are accessable through the
;; 'dot' syntax
(particle_redistribute (bpic_step.np)
                       (bpic_step.nx)
                       (bpic_step.ny))

;; change the time step size (but don't exceed the Courant condition!)
(bpic_step.dt .04) ;; default

;; this function is already in the pic_step main loop, but is a no-op.
;; here, we're going to re-compile it to do something more interesting
(bind-func munge_fields
  (lambda (n:i32)
    (let ((field bxyz)  ;; can be fxyze, bxyze 
          (comp 2)       ;; comp: x = 0, y = 1, z = 2
          (magnitude 10.))
      (doloop (j (/ n 4))
        (pset! (cast field float*)
               (+ (* j 3) comp)
               (+ (pref (cast field float*) (+ (* j 3) comp)) magnitude))
        void))))

;; to remove the external field, re-define munge_fields to be a no-op
(bind-func munge_fields
  (lambda (n:i32)
    void))

(particle_redistribute (bpic_step.np)
                       (bpic_step.nx)
                       (bpic_step.ny))

(zero_data_arrays (bpic_step.np)
                  (bpic_step.nx)
                  (bpic_step.ny))

;; you can change the comp and magnitude variables (in the 'let') and
;; re-eval to see new results. also, you can go back up and
;; redistribute the particles

(bind-func particle_drop
  "drop np particles (selected at random) at the same location"
  (lambda (np x y)
    (doloop (i np)
      (let ((idx (random 0 np)))
        (pset! part (+ 0 (* idx 5)) x)
        (pset! part (+ 1 (* idx 5)) y)))))

;; drop 5000 particles at a random point
(particle_drop 5000 (random (bpic_step.nx)) (random (bpic_step.nx)))

;; change our electrons...
(bpic_step.qme -1.) ;; default
;; to positrons
(bpic_step.qme 1.)

;; change the boundary conditions (can be 0, 1, 2 or 3)
(bpic_step.ipbc 2)

;; turn relativity on/off
(bpic_step.relativity 1)
