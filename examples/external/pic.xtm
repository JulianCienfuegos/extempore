;;; pic.xtm:examples -- example of the pic code in use

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libcpic2.dylib

;;; Commentary:

;; example file for running the PIC particle simulation

;;; Code:

(sys:load "libs/external/pic.xtm")

;; to start the simulation

(run-simulation (now) 1/30)

;; here's a nice shader for this simulation
(update_shader_program
 "// VERTEX SHADER
// GLSL 1.2 compatible

//varying vec2 TexCoord;

attribute vec2 pvert;
uniform float nx;
attribute vec2 pvel;

void main() {
   gl_PointSize = min(10.*length(pvel), 20.);
   gl_FrontColor = vec4(.7,pvel/2.,1.);
   gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * (vec4(pvert.x/(nx/2.0),pvert.y/(nx/2.0),0.0,1.0) - vec4(1.,1.,0.,0.*pvel.x));
   //TexCoord = gl_MultiTexCoord0.st;
}"

 "//  FRAGMENT SHADER
// #version 330

#version 120

#extension GL_ARB_texture_rectangle : disable

uniform sampler2D tex1;

//varying vec2 TexCoord;

void main() {
   gl_FragColor = texture2D(tex1,gl_PointCoord)*gl_Color;
   //gl_FragColor = gl_Color;
}")


;; make sure you can see your OpenGL canvas!

;; Often when you start messing with the simulation the particles will
;; get fast, which with the shader above means they get big, and on a
;; laptop GFX card the larger particles use up too much VRAM and
;; you'll chug. So if it's chugging, try dropping the particle size
;; constant scale factor in the shader above (TODO: make it a uniform
;; which can be set from xtlang code)

;; MESSING WITH THE RUNNING PIC SIMULATION

;; here are some fun things to try:

;; change the number of particles in the simulation
(pic_step.np (/ (pic_step.np) 256))

;; note: np should always be a power of 2, so always scale up/down by
;; powers of 2

;; note how all the 'dropped' particles's state is preserved, and
;; they'll come back to life if we set np back up to its original
;; value

(pic_step.np (* (pic_step.np) 256))

;; this tends to give fairly wild results too
;; (pic_step.np (/ (pic_step.np) 2))
;; (pic_step.np (* (pic_step.np) 2))

;; we can change the boundary conditions (ipbc), where

;; 0 = none
;; 1 = 2d periodic (default)
;; 2 = 2d reflecting
;; 3 = mixed reflecting/periodic

;; often it's nice to change them to none, and it'll seem like
;; nothing's changed, but then when you change them back to 2d
;; periodic then again there can be some resonant and semi-stable
;; patterns. I don't understand enough of the physics to make more
;; than an educated guess

;; e.g. set to no boundary conditions
(pic_step.ipbc 0) ;; 0 is handy for settling things down when they get out of hand

;; and then back to 2d reflecting and see what happens
(pic_step.ipbc 1)
(pic_step.ipbc 3)

;; change the time step size (keep abs value below about 2 or it'll
;; sometimes crash)
(pic_step.dt .1) ;; default
(pic_step.dt -.1)

;; change our electrons...
(pic_step.qme -1.) ;; default
;; to positrons
(pic_step.qme 1.)
;; be ready to change it back otherwise it'll blow up if you leave it
;; too long.

;; and we can re-randomize the initial conditions and velocities, but
;; leave the field unchanged
(init_particles (pic_step.np)
                (pic_step.nx)
                (pic_step.ny))
