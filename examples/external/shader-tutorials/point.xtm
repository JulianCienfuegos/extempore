(sys:load "examples/external/shader-tutorials/shader-setup.xtm")

(bind-func gl_set_modes
  (lambda ()
    ;; (glPolygonMode GL_FRONT_AND_BACK GL_POINT)
    (glEnable GL_PROGRAM_POINT_SIZE)
    void)) ;; GL_LESS

(gl_set_modes)

(bind-val vertices float* 4)
(bind-val colours float* 6)

(bind-func init_arrays
  (lambda ()
    (pfill! vertices
            0.5  0.5
           -0.5 -0.5)
    (pfill! colours
            0.0 1.0 0.0
            0.3 0.0 1.0)))

(init_arrays)

(define point-shader
  (create_shader (file->string "examples/external/shader-tutorials/point.vert")
                 (file->string "examples/external/shader-tutorials/point.frag")))

(bind-func draw
  (let ((vert_vbo (create_vbo vertices 4))
        (colour_vbo (create_vbo colours 6))
        (vao (create_vao)))
    (bind_attribute vao vert_vbo 0 2)
    (bind_attribute vao colour_vbo 1 2)
    (lambda (program)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))        
      (glUseProgram program)
      (glDrawArrays GL_POINTS 0 2)
      (update_vbo colour_vbo GL_STREAM_DRAW)
      (gl_print_error)
      void)))

(define gl-loop
  (lambda (time delta-t)
    ;; (munge_colours)
    (draw point-shader)
    (gl:swap-buffers *gl-window*)
    ;; (println 'time: time)
    (callback (+ time (* *second* delta-t) 0.5)
              'gl-loop
              (+ time (* *second* delta-t)) 
              delta-t)))

(gl-loop (now) 1/30)

(bind-func munge_colours
  (lambda ()
    (doloop (i 6)
      (pset! colours i (random)))))

;; now uncomment munge_colours in the draw loop
