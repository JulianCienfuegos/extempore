(sys:load "examples/external/shader-tutorials/shader-setup.xtm")

(bind-func gl_set_depth_test
  (lambda ()
    (glEnable GL_DEPTH_TEST)
    (glDepthFunc 257))) ;; GL_LESS

(gl_set_depth_test)

;; (bind-val vertices float* 9)
;; (bind-val colours float* 9)

;; (bind-func init_arrays
;;   (lambda ()
    
;;     (pfill! colours
;;             1.0 0.0 0.0
;;             0.0 1.0 0.0
;;             0.0 0.0 1.0
;;             1.0 1.0 0.0
;;             0.0 1.0 1.0
;;             1.0 0.0 1.0)))

;; (init_arrays)

(define bg-shader
  (create_shader (file->string "examples/external/shader-tutorials/bg.vert")
                 (file->string "examples/external/shader-tutorials/bg.frag")))

(bind-func draw
  (let ((vertices:float* (zalloc 18))
        (vert_vbo (begin (pfill! vertices
                                 -1.0 -1.0 0.0
                                 -1.0 1.0 0.0
                                 1.0 1.0 0.0
                                 1.0 1.0 0.0
                                 1.0 -1.0 0.0
                                 -1.0 -1.0 0.0)
                         (create_vbo vertices 18)))
        (vao (create_vao vert_vbo 3)))
    (lambda (program)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))        
      (glUseProgram program)
      (glBindVertexArray vao)
      (glDrawArrays GL_TRIANGLES 0 6)
      (gl_print_error)
      void)))

(define gl-loop
  (lambda (time delta-t)
    (draw bg-shader)
    (gl:swap-buffers *gl-window*)
    ;; (println 'time: time)
    (callback (+ time (* *second* delta-t) 0.5)
              'gl-loop
              (+ time (* *second* delta-t)) 
              delta-t)))

(gl-loop (now) 1)

;; bg shader

(bind-func draw
  (let ((fullscreen_verts:float* (zalloc 18))
        (res (pfill! fullscreen_verts
                     -1.0 -1.0 0.0
                     -1.0 1.0 0.0
                     1.0 1.0 0.0
                     1.0 1.0 0.0
                     1.0 -1.0 0.0
                     -1.0 -1.0 0.0))
        (vbo (create_vbo_packed_floats fullscreen_verts 18))
        (vao (create_vao_1 vbo 3)))
    (lambda (program)
      ;; set the uniforms
      (glUniform2f (glGetUniformLocation program "resolution") width height)
      (glUniform1f (glGetUniformLocation program "clock") (/ (convert (now)) 44100.))
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (glUseProgram program)
      (glBindVertexArray vao)
      (glDrawArrays GL_TRIANGLES 0 2)
      void)))

(define gl-loop
  (lambda (time delta-t)
    (draw bg-shader-program)
    (gl:swap-buffers *gl-window*)
    ;; (println 'time: time)
    (callback (+ time (* *second* delta-t) 0.5)
              'gl-loop
              (+ time (* *second* delta-t)) 
              delta-t)))

(gl-loop (now) 1/30)
