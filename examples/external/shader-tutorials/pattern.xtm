(sys:load "examples/external/shader-tutorials/shader-setup.xtm")

(bind-func gl_set_depth_test
  (lambda ()
    (glEnable GL_DEPTH_TEST)
    (glDepthFunc 257))) ;; GL_LESS

(gl_set_depth_test)

(bind-val vertices float* 9)
(bind-val colours float* 9)

(bind-func init_arrays
  (lambda ()
    (pfill! vertices
            -1.0 -1.0 0.0
            -1.0 1.0 0.0
            1.0 -1.0 0.0
            1.0 1.0 0.0)
    (pfill! colours
            1.0 0.0 0.0
            0.0 1.0 0.0
            0.0 0.0 1.0
            1.0 1.0 0.0
            0.0 1.0 1.0
            1.0 0.0 1.0)))

(init_arrays)

(define pattern-shader
  (create_shader (file->string "examples/external/shader-tutorials/pattern.vert")
                 (file->string "examples/external/shader-tutorials/pattern.frag")))

(bind-func draw
  (let ((vert_vbo (create_vbo vertices 12))
        (colour_vbo (create_vbo colours 18))
        (vao (create_vao vert_vbo 3 colour_vbo 3)))
    (lambda (program)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))        
      (glUseProgram program)
      (glBindVertexArray vao)
      (glDrawArrays GL_TRIANGLES_STRIP 0 4)
      ;; the update call is only necessary if you're changing the
      ;; vert/colour data
      (update_vbo vert_vbo vertices 12)
      void)))

(define gl-loop
  (lambda (time delta-t)
    (draw pattern-shader)
    (gl:swap-buffers *gl-window*)
    ;; (println 'time: time)
    (callback (+ time (* *second* delta-t) 0.5)
              'gl-loop
              (+ time (* *second* delta-t)) 
              delta-t)))

(gl-loop (now) 1)
