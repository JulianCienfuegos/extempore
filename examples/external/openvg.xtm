;;; openvg.xtm -- OpenVG drawing example

;; Author: Andrew Sorensen, Ben Swift
;; Keywords: extempore
;; Required dylibs: libOpenVG

;;; Commentary:

;;

;;; Code:

(define fullscreen #f)
;; (define width 1920.0)
;; (define height 1200.0)
(define width 1024.0)
(define height 768.0)
(bind-val width float width)
(bind-val height float height)

;; setup opengl
(define *gl-ctx* (gl:make-ctx ":0.0" fullscreen 0.0 0.0 width height))

;; load in the required libraries
(sys:load "libs/external/shaders.xtm")
(sys:load "libs/external/openvg.xtm")

;; init xtm render pipeline
(xtm_render_setup width height)
(if (<> (xtm-vg-create-context width height) 1) (xtm_vg_print_error))

(bind-func post:XTMRENDERCB
  (let ((image:VGImage (xtm_load_vgimage "assets/images/image.png"))
        (path (xtm_create_path))
        (fill (vgCreatePaint))
        (fill_color:xtm_color* (alloc))
        (stroke (vgCreatePaint))
        (stroke_color:xtm_color* (alloc))
        (clear_color:xtm_color* (alloc)))
    (afill! fill_color 1.0 0.0 0.0 0.5)
    (afill! stroke_color 0.0 0.0 1.0 0.5)
    (afill! clear_color 0.0 0.0 0.0 1.0)
    (xtm_paint_set_fill fill fill_color)
    (xtm_paint_set_stroke stroke stroke_color 10.)
    (lambda (frame shader m v p data)
      (let ((i:float 0.0))
        (xtm_vg_reset_matrices)
        (xtm_vg_clear (convert width) (convert height) clear_color)
        ;; create the path (using the add_circle closure)
        (dotimes (i 200.0)
          (xtm_add_ellipse
           path
           (+ (/ width 2.0) (* 200. (cos (* i 0.00025 (convert frame)))))
           (+ (/ height 2.0) (* 100. (tan (* 0.0001 i (convert frame)))))
           30.
           30.))
        ;; draw the image
        (if (null? image) void (vgDrawImage image))
        ;; draw the paths
        (xtm_draw_path_keep path)
        ;; cleanup
        (xtm_clear_path path)
        (xtm_vg_print_error)
        void))))

(bind-func gl_render
  (lambda ()
    (xtm_render null null null post null)
    void))

(define gl-loop
  (lambda (time delta-t)
    (let ((late-by (- (now) time))
          (next-frame-time (+ time (* *second* delta-t))))
      (if (> late-by 0)
          (print "Late by " (* 1.0 (/ late-by *second*)) "seconds\n")
          (begin
            (gl_render)
            (gl:swap-buffers *gl-ctx*)))
      (callback (* 0.9 next-frame-time)
                'gl-loop
                next-frame-time
                delta-t))))

(gl-loop (now) 1/20)
