(sys:load "libs/external/glfw3.xtm")

(glfw_init)
(glfw_set_osx_core_profile)

(define *gl-window* (glfw_create_window 640 480))

(glfw_make_context_current *gl-window*)

(glew_init 1)

(gl_print_driver_info)

(bind-func gl_set_depth_test
  (lambda ()
    (glEnable GL_DEPTH_TEST)
    (glDepthFunc GL_LESS)))

(gl_set_depth_test)

(bind-val points float*)
(bind-val colours float*)
(bind-func fill_points_and_colours
  (lambda ()
    (if (not (null? points))
        (begin (free points)
               (set! points (convert null float*))))
    (if (not (null? colours))
        (begin (free colours)
               (set! colours (convert null float*))))
    (let ((pptr:float* (halloc 9))
          (cptr:float* (halloc 9)))
      (set! points pptr)
      (set! colours cptr)
      (pfill! points
              0. .5 .5
              .5 -.5 0.
              -.5 -.5 0.)
      (pfill! colours
              1. 0. 0.
              0. 1. 0.
              0. 0. 1.))))

(fill_points_and_colours)

(bind-func print_points_and_colours
  (lambda ()
    (doloop (i 9)
      (println (pref points i)
               (pref colours i)))))

(print_points_and_colours)

(bind-func create_points_vbo
  (lambda ()
    (let ((vbo_ptr:i32* (salloc))
          (vbo:i32 0))
      (glGenBuffers 1 vbo_ptr)
      (set! vbo (pref vbo_ptr 0))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferData GL_ARRAY_BUFFER (* 9 4) (convert points) GL_DYNAMIC_DRAW)
      vbo)))

(bind-func create_colours_vbo
  (lambda ()
    (let ((vbo_ptr:i32* (salloc))
          (vbo:i32 0))
      (glGenBuffers 1 vbo_ptr)
      (set! vbo (pref vbo_ptr 0))
      (glBindBuffer GL_ARRAY_BUFFER vbo)
      (glBufferData GL_ARRAY_BUFFER (* 9 4) (convert colours) GL_DYNAMIC_DRAW)
      vbo)))

(bind-func create_triangle_vao
  (lambda (pvbo cvbo)
    (let ((vao_ptr:i32* (salloc))
          (vao:i32 0))
      (glGenVertexArrays 1 vao_ptr)
      (set! vao (pref vao_ptr 0))
      (glBindVertexArray vao)
      (glBindBuffer GL_ARRAY_BUFFER pvbo)
      (glVertexAttribPointer 0 3 GL_FLOAT (convert GL_FALSE) 0 null)
      (glBindBuffer GL_ARRAY_BUFFER cvbo)
      (glVertexAttribPointer 1 3 GL_FLOAT (convert GL_FALSE) 0 null)
      (glEnableVertexAttribArray 0)
      (glEnableVertexAttribArray 1)      
      vao)))

;; do all the things!
(define pvbo (create_points_vbo))
(define cvbo (create_colours_vbo))
(define vao (create_triangle_vao pvbo cvbo))

(define vertex-shader
  "#version 400
layout(location = 0) in vec3 vertex_position;
layout(location = 1) in vec3 vertex_colour;

out vec3 colour;

void main () {
  colour = vertex_colour;
  gl_Position = vec4 (vertex_position, 1.0);
}")

(define fragment-shader
  "#version 400
in vec3 colour;
out vec4 frag_colour;

void main () {
  frag_colour = vec4 (colour, 1.0);
}")

(define shader-program (create_shader vertex-shader fragment-shader))

(bind-func draw
  (lambda (window program vao)
    (glClear (bitwise-or GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))        
    (glUseProgram program)
    (glBindVertexArray vao)
    (glDrawArrays GL_TRIANGLES 0 3)
    (glfwPollEvents)
    (glfwSwapBuffers window)))

(define gl-loop
  (lambda (time delta-t)
    (draw *gl-window* shader-program vao)
    (println 'time: time)
    (if (<> (glfw_window_should_close *gl-window*) 0)
        (begin (glfw_destroy_window *gl-window*)
               (print "Finishing gl-loop.\n"))
        (callback (+ time (* *second* delta-t) 0.5)
                  'gl-loop
                  (+ time (* *second* delta-t)) 
                  delta-t))))

(gl-loop (now) 1)
