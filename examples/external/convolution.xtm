;;
;; convolution.xtm
;;
;; a naive time domain convolution example:
;; obviously you should use frq domain for this
;; but this is a nice obvious example, and also
;; can be useful for situations using *SMALL* IR's
;;
;; make sure you put YOUR stereo IR file in
;;
;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libsndfile
;;

;;; Code:

;; try loading xtm.xtm first
(sys:load "libs/xtm.xtm")
;; failing that fall through to these
(sys:load "libs/external/sndfile.xtm")
(sys:load "libs/external/instruments_ext.xtm")

;;
;; native convolution
;; 
;; this assumes mono IR file
;;
;; lgth is size of IR in frames
;; anything bigger than 1/4 of a second is
;; going to make extempore work very hard
;;
;; N should be 2's compliment
(bind-func convolution_c
  (lambda (ir_filename ir_length)
    (let ((ir_buf (AudioBuffer ir_filename 0 ir_length))
          (ir_buf_ptr (audio_data ir_buf))
          (sum 0.0) (i 0) (n 0) (length_minus_1 (- ir_length 1))
          (in_buf (AudioBuffer ir_length 1))
          (in_buf_ptr (audio_data in_buf)))
      (lambda (in dry:SAMPLE wet:SAMPLE)
        (pset! in_buf_ptr n in)
        (set! sum 0.0)
        (dotimes (i ir_length)
          (set! sum
                (+ sum
                   (* (pref ir_buf_ptr i)
                      (pref ir_buf_ptr (& (- n i) length_minus_1))))))
        (set! n (& (+ n 1) length_minus_1))
        (+ (* dry in) (* wet sum))))))


;; make sure you put your stereo IR file in here!!
(bind-func dsp:DSP 100000000
  (let ((convl (convolution_c "assets/ir/minsterl.aif" (* 512 8)))
        (convr (convolution_c "assets/ir/minsterl.aif" (* 512 8)))
        (out 0.0)
        (dry 1.0)
        (wet 0.2))
    (lambda (in time chan dat)
      (cond ((= chan 0)
             (set! out (convl (sampler in time chan dat) dry wet)))
            ((= chan 1)
             (set! out (convr (sampler in time chan dat) dry wet))))
      out)))

(dsp.dry 1.0)
(dsp.wet 0.2)

(dsp:set! dsp)
;; turn off synth reverb
(fmsynth_fx.wet 0.0)
(fmsynth_fx.dwet 0.0)
(fmsynth_fx.cwet 0.0)

;; make some noise
(define test
  (lambda (beat dur)
    (play sampler
          (pc:random 65 84 (pc:scale 5 'mixolydian))
          100
          (+ 4.0 (random 6.0)) 0 (random))
    (callback (*metro* (+ beat (* .5 dur))) 'test (+ beat dur)
              (random '(1 2 3 4 5)))))

(test (*metro* 'get-beat 4) 16)

(audio_file_total_samples "assets/ir/minsterl.aif")
