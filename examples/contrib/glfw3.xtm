;; (sys:load "libs/core/math.xtm")
(sys:load "libs/contrib/glfw3.xtm")

(xtgl_init)

(define width 640.0)
(define height 480.0)
(bind-val width float 640.0)
(bind-val height float 480.0)
(define fullscreen #t)

(define *xtgl-window* (xtgl_create_window_with_size_compat (real->integer width) (real->integer height)))

;; (callback (+ (now) (* 10 *second*)) (lambda () (xtgl_destroy_window *xtgl-window*)))
;; (define *xtgl-window* (xtgl_create_window_fullscreen_compat))

(xtgl_make_context_current *xtgl-window*)

(xtgl_print_driver_info)

(bind-func xtgl_print_window_details
  (lambda (window)
    (if (not (null? window))
        (begin
          (println "GLFW_FOCUSED = " (glfwGetWindowAttrib window GLFW_FOCUSED))
          (println "GLFW_ICONIFIED = " (glfwGetWindowAttrib window GLFW_ICONIFIED))
          (println "GLFW_RESIZABLE = " (glfwGetWindowAttrib window GLFW_RESIZABLE))
          (println "GLFW_VISIBLE = " (glfwGetWindowAttrib window GLFW_VISIBLE))
          (println "GLFW_DECORATED = " (glfwGetWindowAttrib window GLFW_DECORATED)))
        (println "Error: window is NULL."))))

(xtgl_print_window_details *xtgl-window*)

(bind-func xtgl_set_window_details
  (lambda (window)
    (if (not (null? window))
        (begin
          (glfwSetWindowAttrib window GLFW_FOCUSED)
          (glfwSetWindowAttrib window GLFW_ICONIFIED)
          (glfwSetWindowAttrib window GLFW_RESIZABLE)
          (glfwSetWindowAttrib window GLFW_VISIBLE)
          (glfwSetWindowAttrib window GLFW_DECORATED)
          (xtgl_print_window_details window))
        (println "Error: window is NULL."))))


(xtgl_make_context_current *xtgl-window*)

(xtgl_print_primary_monitor_details)

(xtgl_print_driver_info)

(define xtgl-loop
  (lambda (time delta-t)
    (if (= (xtgl_window_should_close *xtgl-window*) 0)
        (begin
          (println 'time: time)
          (xtgl_swap_buffers *xtgl-window*)
          (xtgl_poll_events)
          (let ((next-time (max (+ time (* *second* delta-t)) (now))))
            (callback next-time
                      'xtgl-loop
                      next-time 
                      delta-t)))
        (begin (println "shutting down.")
               (xtgl_destroy_window *xtgl-window*)))))

(xtgl-loop (now) 1/2)

(bind-val XTGL_WINDOW GLFWwindow*)

(bind-func set_XTGL_WINDOW
  (lambda (window:GLFWwindow*)
    (set! XTGL_WINDOW window)))

(set_XTGL_WINDOW *xtgl-window*)

(bind-func xtgl_loop
  (lambda (time delta-t)
    (if (= (xtgl_window_should_close XTGL_WINDOW) 0)
        (begin
          (xtgl_swap_buffers XTGL_WINDOW)
          (xtgl_poll_events)
          (let ((next-time (max (+ time (* 44100. delta-t)) (now))))
            (callback next-time
                      xtgl_loop
                      next-time 
                      delta-t))))
    void))

(xtgl_loop (now) 1/2)


(xtgl_destroy_window *xtgl-window*)
(xtgl_terminate)
