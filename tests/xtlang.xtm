;;; xtlang_test.xtm -- rudimentary unit testing for xtlang code

;; Author: Ben Swift, Andrew Sorensen
;; Keywords: extempore

;;; Commentary:

;; a test suite for xtlang code. Currently, the tests cannot be run
;; with (sys:load "libs/core/xtlang_test.xtm"), because the first failing
;; compilation will stop the evaluation of the file.

;; The way to run all the tests, then, is to use the evaluate-buffer
;; functionality of your editor (in Emacs, bound to C-x C-b by
;; default) to send the forms one at a time to the compiler. After all
;; the tests are run, a summary of the results will be printed to the
;; log.

;;; Code:

(define start_time (now))

(sys:load "tests/test.xtm")

;; bit twiddling

(bind-func test_bit_twiddle_1
  (lambda ()
    (bitwise-and 65535 255 15 1)))

(test-xtfunc (test_bit_twiddle_1) 1)

(bind-func test_bit_twiddle_2
  (lambda ()
    (bitwise-not -1)))

(test-xtfunc (test_bit_twiddle_2) 0)

(bind-func test_bit_twiddle_3
  (lambda ()
    (bitwise-not 0)))

(test-xtfunc (test_bit_twiddle_3) -1)

(bind-func test_bit_twiddle_4
  (lambda ()
    (bitwise-shift-right 65535 8)
    (bitwise-shift-right 65535 4 4)))

(test-xtfunc (test_bit_twiddle_4) 255)

(bind-func test_bit_twiddle_5
  (lambda ()
    (bitwise-shift-left (bitwise-shift-right 65535 8) 4 4)))

(test-xtfunc (test_bit_twiddle_5) 65280)

(bind-func test_bit_twiddle_6
  (lambda ()
    (bitwise-and (bitwise-or (bitwise-eor 21844 65534) (bitwise-eor 43690 65534)) 1)))

(test-xtfunc (test_bit_twiddle_6) 0)

;; integer literals default to 64 bit integers
(bind-func int-literal-test
   (lambda (a)
     (* a 5)))

(test-xtfunc (int-literal-test 6) 30)

;; float literals default to doubles
(bind-func float-literal-test
   (lambda (a)
     (* a 5.0)))

(test-xtfunc (float-literal-test 6.0) 30.0)

;; you are free to recompile an existing closure
(bind-func int-literal-test
   (lambda (a)
      (/ a 5)))

(test-xtfunc (int-literal-test 30))

(bind-func closure-test1
   (let ((power 0))
      (lambda (x)
	 (set! power (+ power 1)) ;; set! for closure mutation as per scheme
	 (* x power))))

(test-xtfunc (closure-test1 2))

(bind-func closure-returns-closure-test
  (lambda ()
    (lambda (x)
      (* x 3))))

(test-xtfunc (closure-returns-closure-test))

(bind-func incrementer-test1
   (lambda (i:i64)
      (lambda (inc)
	 (set! i (+ i inc))
	 i)))

(test-xtfunc (incrementer-test1 0))

;; so we need to type f properly
(bind-func incrementer-test2
   (lambda (f:[i64,i64]* x)
     (f x)))

;; todo can testing use the output of previous tests?

;; (test-xtfunc (closure-test2))
;; ok so now we can call my-inc-maker
;; which will return a closure
;; which scheme stores as a generic cptr
(define myf (incrementer-test1 0))

;; and we can call my-in-maker-wrapper
;; to appy myf
(test-xtfunc (incrementer-test2 myf 1) 1)
(test-xtfunc (incrementer-test2 myf 1) 2)
(test-xtfunc (incrementer-test2 myf 1) 3)

;; of course the wrapper is only required if you
;; need interaction with the scheme world.
;; otherwise you just call my-inc-maker directly

;; this avoids the wrapper completely
(bind-func incrementer-test3
   (let ((f (incrementer-test1 0)))
      (lambda ()
	 (f 1))))

(test-xtfunc (incrementer-test3) 1)
(test-xtfunc (incrementer-test3) 2)
(test-xtfunc (incrementer-test3) 3)

;; hopefully you're getting the idea.
;; note that once we've compiled something
;; we can then use it any of our new
;; function definitions.

;; do a little 16bit test
(bind-func bitsize-sixteen
  (lambda (a:i16)
    (dtoi16 (* (i16tod a) 5.0))))

(test-xtfunc (bitsize-sixteen 5) 25)

;; while loop test

(bind-func test_while_loop_1
  (lambda ()
    (let ((count 0))
      (while (< count 5)
	(printf "count = %lld\n" count)
	(set! count (+ count 1)))
      count)))

(test-xtfunc (test_while_loop_1) 5)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Closures can be recursive
;;

(bind-func recursive-closure-test
  (lambda (a)
    (if (< a 1)
	(printf "done\n")
	(begin (printf "a: %lld\n" a)
	       (recursive-closure-test (- a 1))))))

(test-xtfunc (recursive-closure-test 3))

;; check TAIL OPTIMIZATION
;; if there is no tail call optimiation
;; in place then this should blow the
;; stack and crash the test
(bind-func tail_opt_test
  (lambda (n:i64)
    (let ((a:float* (salloc 8000)))
      (if (= n 0)
          (printf "tail opt test passed!\n")
          (tail_opt_test (- n 1))))))

(println 'A 'segfault 'here 'incidates 'that 'tail-call-optimizations 'are 'not 'working!)
(test-xtfunc (tail_opt_test 200))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; some anon lambda tests
;;

(bind-func infer_lambdas_test
  (lambda ()
    (let ((a 5)
          (b (lambda (x) (* x x)))
          (c (lambda (y) (* y y))))          
      (c (b a)))))

(test-xtfunc (infer_lambdas_test))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; a simple tuple example
;;
;; tuple types are represented as <type,type,type>*
;;

;; make and return a simple tuple
(bind-func tuple-test1
  (lambda ()
    (let ((t:<i64,double,i32>* (alloc)))
      t)))

(test-xtfunc (tuple-test1))

;; logview shows [<i64,double,i32>*]*
;; i.e. a closure that takes no arguments
;; and returns the tuple <i64,double,i32>*


;; here's another tuple example
;; note that my-test-7's return type is inferred
;; by the tuple-reference index
;; (i.e. i64 being tuple index 0)
(bind-func tuple-test2
  (lambda ()
    (let ((a:<i64,double>* (alloc)) ; returns pointer to type <i64,double>
	  (b 37)
	  (c 6.4))
      (tuple-set! a 0 b) ;; set i64 to 64
      (tset! a 1 c) ;; set double to 6.4 - tset! is an alias for tuple-set!
      (printf "tuple:1 %lld::%f\n" (tuple-ref a 0) (tref a 1))
      ;; we can fill a tuple in a single call by using tfill!
      (tfill! a 77 77.7)
      (printf "tuple:2 %lld::%f\n" (tuple-ref a 0) (tuple-ref a 1))
      (tuple-ref a 0))))

(test-xtfunc (tuple-test2) 77)

;; return first element which is i64
;; should be 64 as we return the
;; first element of the tuple
;; (println (my-test-7)) ; 77


;; tbind binds variables to values
;; based on tuple structure
;; _ (underscore) means don't attempt
;; to match against this position in
;; the tuple (i.e. skip)
(bind-func tuple-bind-test
  (lambda ()
    (let ((t1:<i32,float,<i32,float>*,double>* (alloc))
          (t2:<i32,float>* (alloc))
          (a 0) (b:float 0.0) (c 0.0))
      (tfill! t2 3 3.3)
      (tfill! t1 1 2.0 t2 4.0)
      (tbind t1 a b _ c)
      c)))

(test-xtfunc (tuple-bind-test) 4.0)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; some array code with *casting*
;; this function returns void
(bind-func array-test1
   (lambda ()
      (let ((v1:|5,float|* (alloc))
	    (v2:|5,float|* (alloc))
	    (i 0)
	    (k 0))
	 (dotimes (i 5)
	    ;; random returns double so "truncate" to float
	    ;; which is what v expects
	    (array-set! v1 i (dtof (random))))
	 ;; we can use the afill! function to fill an array
	 (afill! v2 1.1 2.2 3.3 4.4 5.5)
	 (dotimes (k 5)
	    ;; unfortunately printf doesn't like floats
	    ;; so back to double for us :(
	    (printf "val: %lld::%f::%f\n" k
		    (ftod (array-ref v1 k))
		    (ftod (aref v2 k)))))))

(test-xtfunc (array-test1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; some crazy array code with
;; closures and arrays
;; try to figure out what this all does
;;
;; this example uses the array type
;; the pretty print for this type is
;; |num,type| num elements of type
;; |5,i64| is an array of 5 x i64
;;
;; An array is not a pointer type
;; i.e. |5,i64| cannot be bitcast to i64*
;;
;; However an array can be a pointer
;; i.e. |5,i64|* can be bitcast to i64*
;; i.e. |5,i64|** to i64** etc..
;;
;; make-array returns a pointer to an array
;; i.e. (make-array 5 i64) returns type |5,i64|*
;;
;; aref (array-ref) and aset! (array-set!)
;; can operate with either pointers to arrays or
;; standard pointers.
;;
;; in other words aref and aset! are happy
;; to work with either i64* or |5,i64|*

(bind-func array-test2
   (lambda (v:|5,i64|*)
      (let ((f (lambda (x)
		  (* (array-ref v 2) x))))
	f)))

(bind-func array-test3
  (lambda (v:|5,[i64,i64]*|*)
    (let ((ff (aref v 0))) ; aref alias for array-ref
      (ff 5))))

(bind-func array-test4
   (lambda ()
      (let ((v:|5,[i64,i64]*|* (alloc)) ;; make an array of closures!
	    (vv:|5,i64|* (alloc)))
	 (array-set! vv 2 3)
	 (aset! v 0 (array-test2 vv)) ;; aset! alias for array-set!
	 (array-test3 v))))

;; try to guess the answer before you call this!!
(test-xtfunc (array-test4))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; some conditionals

(bind-func cond-test1
   (lambda (x:i64 y)
      (if (> x y)
	  x
	  y)))

(test-xtfunc (cond-test1 12 13))

;; returns boolean true
(bind-func cond-test2
   (lambda (x:i64)
      (cond ((= x 1) (printf "A\n"))
	    ((= x 2) (printf "B\n"))
	    ((= x 3) (printf "C\n"))
	    ((= x 4) (printf "D\n"))
	    (else (printf "E\n")))
      #t))

(test-xtfunc (cond-test2 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; making a linear envelop generator
;; for signal processing and alike

(bind-func envelope-segments
  (lambda (points:double* num-of-points:i64)
    (let ((lines:[double,double]** (zone-alloc num-of-points))
	  (k 0))
      (dotimes (k num-of-points)
	(let* ((idx (* k 2))
	       (x1 (pointer-ref points (+ idx 0)))
	       (y1 (pointer-ref points (+ idx 1)))
	       (x2 (pointer-ref points (+ idx 2)))
	       (y2 (pointer-ref points (+ idx 3)))
	       (m (if (= 0.0 (- x2 x1)) 0.0 (/ (- y2 y1) (- x2 x1))))
	       (c (- y2 (* m x2)))
	       (l (lambda (time) (+ (* m time) c))))
	  (pointer-set! lines k l)))
      lines)))

(bind-func make-envelope
   (lambda (points:double* num-of-points)
      (let ((klines:[double,double]** (envelope-segments points num-of-points))
	    (line-length num-of-points))
	 (lambda (time)
	    (let ((res -1.0)
		  (k:i64 0))
	       (dotimes (k num-of-points)
		  (let ((line (pointer-ref klines k))
			(time-point (pointer-ref points (* k 2))))
		     (if (or (= time time-point)
			     (< time-point time))
			 (set! res (line time)))))
	       res)))))

;; make a convenience wrapper
(bind-func env-wrap
   (let* ((points 3)
	  (data:double* (zone-alloc (* points 2))))
      (pointer-set! data 0 0.0) ;; point data
      (pset! data 1 0.0)
      (pset! data 2 2.0)
      (pset! data 3 1.0)
      (pset! data 4 4.0)
      (pset! data 5 0.0)
      (let ((f (make-envelope data points)))
	 (lambda (time:double)
	   (f time)))))

(test-xtfunc (env-wrap 0.0) 0.0) ;; time 0.0 should give us 0.0
(test-xtfunc (env-wrap 1.0) 0.5) ;; time 1.0 should give us 0.5
(test-xtfunc (env-wrap 2.0) 1.0) ;; time 2.0 should be 1.0
(test-xtfunc (env-wrap 2.5) 0.75) ;; going back down 0.75
(test-xtfunc (env-wrap 4.0) 0.0) ;; to zero


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; direct access to a closures environment
;;
;; it is possible to directly access a closures
;; environment in order to read or modify data
;; at runtime.
;;
;; You do this using a dot operator
;; To access an environment slot you use
;; closure.slot:type
;; So for example
;; (f.a:i32)
;; would return the 32bit integer symbol 'a'
;; from the closure 'f'
;;
;; To set an environment slot you just
;; add a value of the correct type
;; for example
;; (f.a:i32 565)
;; would set 'a' in 'f' to 565
;;
;; let's create a closure that capture's 'a'


(bind-func dot-access-test1
  (let ((a:i32 6))
    (lambda ()
      (printf "a:%d\n" a)
      a)))

;; now let's create a new function
;; that calls my-test14 twice
;; once normally
;; then we directly set the closures 'a' binding
;; then call again
;;
(bind-func dot-access-test2
  (lambda (x:i32)
    (dot-access-test1)
    (dot-access-test1.a:i32 x)
    (dot-access-test1)))

(test-xtfunc (dot-access-test2 9))

;; of course this works just as well for
;; non-global closures
(bind-func dot-access-test3
  (lambda (a:i32)
    (let ((f (lambda ()
	       (* 3 a))))
      f)))

(bind-func dot-access-test4
  (lambda ()
    (let ((f (dot-access-test3 5)))
      (f.a:i32 7)
      (f))))

(test-xtfunc (dot-access-test4)) ;; 21

;; and you can get and set closures also!
(bind-func dot-access-test5
  (lambda ()
    (let ((f (lambda (x:i64) x)))
      (lambda (z)
	(f z)))))

(test-xtfunc (dot-access-test5))

(bind-func dot-access-test6
  (lambda ()
    (let ((t1 (dot-access-test5))
	  (t2 (dot-access-test5)))
      ;; identity of 5
      (printf "%lld:%lld\n" (t1 5) (t2 5))
      (t1.f:[i64,i64]* (lambda (x:i64) (* x x)))
      ;; square of 5
      (printf "%lld:%lld\n" (t1 5) (t2 5))
      ;; cube of 5
      (t2.f:[i64,i64]* (lambda (y:i64) (* y y y)))
      (printf "%lld:%lld\n" (t1 5) (t2 5))
      void)))

(test-xtfunc (dot-access-test6)) ;; 5:5 > 25:5 > 25:125

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; named types

;; it can sometimes be helpful to allocate
;; a predefined tuple type on the stack
;; you can do this using allocate
(bind-type vec3 <double,double,double>)

;; String printing!
(bind-func vec3_print:[void,vec3*]*
  (lambda (x)
    (printf "<%d,%d,%d>" (tref x 0) (tref x 1) (tref x 2))
    void))

(bind-poly print vec3_print)

;; note that point is deallocated at the
;; end of the function call.  You can
;; stack allocate (stack-alloc)
;; any valid type  (i64 for example)
(bind-func salloc-test
  (lambda ()
    (let ((point:vec3* (stack-alloc)))
      (tset! point 0 0.0)
      (tset! point 1 -1.0)
      (tset! point 2 1.0)
      1)))

(test-xtfunc (salloc-test)) ;; 1

;; all named types have 2 default constructors
;; name (zone alloation) + name_h (heap allocation)
;; and a default print poly
(bind-func data-constructor-test
  (lambda ()
    (let ((v1 (vec3 1.0 2.0 3.0))
          (v2 (vec3_h 4.0 5.0 6.0)))
      (println v1 v2)
      ;; halloced vec3 needs freeing
      (free v2)
      void)))

(test-xtfunc (data-constructor-test))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; aref-ptr and tref-ptr
;;

;; aref-ptr and tref-ptr return a pointer to an element
;; just as aref and tref return elements aref-ptr and
;; tref-ptr return a pointer to those elements.

;; This allows you to do things like create an array
;; with an offset
(bind-func aref-ptr-test
  (lambda ()
    (let ((arr:|32,i64|* (alloc))
	  (arroff (aref-ptr arr 16))
	  (i 0)
	  (k 0))
      ;; load arr
      (dotimes (i 32) (aset! arr i i))
      (dotimes (k 16)
	(printf "index: %lld\tarr: %lld\tarroff: %lld\n"
		k (aref arr k) (pref arroff k))))))

(test-xtfunc (aref-ptr-test))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; arrays
;; Extempore lang supports arrays as for first class
;; aggregate types (in other words as distinct from
;; a pointer).
;;
;; an array is made up of a size and a type
;; |32,i64| is an array of 32 elements of type i64
;;

(bind-type tuple-with-array <double,|32,|4,i32||,float>)

(bind-func array-test5
  (lambda ()
    (let ((tup:tuple-with-array* (stack-alloc))
	  (t2:|32,i64|* (stack-alloc)))
      (aset! t2 0 9)
      (tset! tup 2 5.5)
      (aset! (aref-ptr (tref-ptr tup 1) 0) 0 0)
      (aset! (aref-ptr (tref-ptr tup 1) 0) 1 1)
      (aset! (aref-ptr (tref-ptr tup 1) 0) 2 2)
      (printf "val: %lld %lld %f\n"
	      (aref (aref-ptr (tref-ptr tup 1) 0) 1)
	      (aref t2 0) (ftod (tref tup 2)))
      (aref (aref-ptr (tref-ptr tup 1) 0) 1))))

(test-xtfunc (array-test5) 1) ;; val: 1 9 5.5

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Global Variables
;;
;; You can allocate global variables using bind-val
;;

(bind-val g_var_a i32 5)

;; increment g_var_a by inc
;; and return new value of g_var_a
(bind-func global_var_test1
  (lambda (inc)
    (set! g_var_a (+ g_var_a inc))
    g_var_a))

(test-xtfunc (global_var_test1 3) 8) ;; 8

;; you can bind any primitive type
(bind-val g_var_b double 5.5)
(bind-val g_var_c i1 0)

(bind-func global_var_test1b
  (lambda ()
    (* g_var_b (if g_var_c 1.0 4.0))))

(test-xtfunc (global_var_test1b) 22.0)

;; global strings

(bind-val g_cstring i8* "Jiblet.")

(bind-func test_g_cstring
  (lambda ()
    (let ((i 0))
      (dotimes (i 7)
        (printf "g_cstring[%lld] = %c\n" i (pref g_cstring i)))
      (printf "\nSpells... %s\n" g_cstring))))

(test-xtfunc (test_g_cstring))

(bind-func test_g_cstring1
  (lambda ()
    (let ((test_cstring "Niblot.")
          (i 0)
          (sum 0))
      (dotimes (i 7)
        (let ((c1 (pref g_cstring i))
              (c2 (pref test_cstring i)))
          (printf "checking %c against %c\n" c1 c2)
          (if (= c1 c2)
              (set! sum (+ sum 1)))))
      sum)))

(test-xtfunc (test_g_cstring1) 5)

(sys:load "libs/core/xstring.xtm")

(bind-func test_g_cstring2
  (lambda ()
    (xstring_levenshtein (xstring g_cstring)
                         (xstring g_cstring))))

(test-xtfunc (test_g_cstring2) 0)




;; for tuples, arrays and vectors, bind-val only takes *two*
;; arguments. The tuple/array/vector will be initialised to zero.

(bind-val g_tuple1 <i64,i64>)
(bind-val g_tuple2 <double,double>)

(bind-func test_g_tuple
  (lambda ()
    (tfill! g_tuple1 1 4)
    (tfill! g_tuple2 4.0 1.0)
    (and (= (tref g_tuple1 0) (dtoi64 (tref g_tuple2 1)))
         (= (dtoi64 (tref g_tuple2 0)) (tref g_tuple1 1)))))

(test-xtfunc (test_g_tuple) 1)

;; same thing with arrays

(bind-val g_array1 |10,double|)
(bind-val g_array2 |10,i64|)

;; if we just loop over and print the values in each array

(bind-func test_g_array11
  (lambda ()
    (let ((i 0))
      (dotimes (i 10)
        (printf "garray_1[%lld] = %f   garray_2[%lld] = %lld\n"
                i (aref g_array1 i) i (aref g_array2 i))))))

(test-xtfunc (test_g_array11) 1)

;; but if we loop over and set some values into the arrays

(bind-func test_g_array2
  (lambda ()
    (let ((i 0))
      (dotimes (i 10)
        (aset! g_array1 i (i64tod i))
        (aset! g_array2 i i)
        (printf "garray_1[%lld] = %f   garray_2[%lld] = %lld\n"
                i (aref g_array1 i) i (aref g_array2 i)))
      (= (dtoi64 (aref g_array1 5))
         (aref g_array2 5)))))

(test-xtfunc (test_g_array2) 1)

;; just to test, let's try a large array

(bind-val g_array3 |100000000,i64|)

(bind-func test_g_array3
  (lambda ()
    (let ((i 0))
      (dotimes (i 100000000)
	(aset! g_array3 i i))
      (= (pref g_array3 87654321)
	 87654321))))

(test-xtfunc (test_g_array3) 1)

;; if you want to bind a global pointer, then the third 'value'
;; argument is the size of the memory to allocate (in elements, not in bytes)

(bind-val g_ptr0 double* 10)

(bind-func test_g_ptr0
  (lambda ()
    (let ((sum 0.0)
          (i 0))
      (dotimes (i 10)
        (pset! g_ptr0 i (i64tod i))
        (set! sum (+ sum (pref g_ptr0 i))))
      sum)))

(test-xtfunc (test_g_ptr0) 45.0)

(bind-val g_ptr1 |4,i32|* 2)
(bind-val g_ptr2 <i64,double>* 4)

(bind-func test_g_ptr1
  (lambda ()
    (afill! g_ptr1 11 66 35 81)
    (tset! g_ptr2 1 35.0)
    (printf "%f :: %d\n" (tref g_ptr2 1) (aref g_ptr1 2))
    (aref g_ptr1 3)))

(test-xtfunc (test_g_ptr1) 81) ;; should also print 35.000000 :: 35

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Callbacks

(bind-func callback-test
  (lambda (time:i64 count:i64)
    (printf "time: %lld:%lld\n" time count)
    (callback (+ time 1000) callback-test (+ time 22050) (+ count 1))))

(test-xtfunc (callback-test (now) 0))

;; compiling this will stop the callbacks
;;
;; of course we need to keep the type
;; signature the same [void,i64,i64]*
;;
(bind-func callback-test
  (lambda (time:i64 count:i64)
    #t))

(test-xtfunc (callback-test))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; some memzone tests

(bind-func memzone-test1
  (lambda ()
    (let ((b:|5,double|* (zalloc)))
      (aset! b 0
	(memzone 1024
	   (let ((a:|10,double|* (zalloc)))
	     (aset! a 0 3.5)
	     (aref a 0))))
      (let ((c:|9,i32|* (zalloc)))
	(aset! c 0 99)
	(aref b 0)))))

(test-xtfunc (memzone-test1) 3.5)

(bind-func memzone-test2
  (lambda ()
    (memzone 1024
      (let ((k:|15,double|* (zalloc))
	    (f (lambda (fa:|15,double|*)
		 (memzone 1024
		   (let ((a:|10,double|* (zalloc))
			 (i 0))
		     (dotimes (i 10)
		       (aset! a i (* (aref fa i) (random))))
		   a)))))
	(f k)))))

(test-xtfunc (memzone-test2))

(bind-func memzone-test3
  (lambda ()
    (let ((v (memzone-test2))
	  (i 0))
      (dotimes (i 10) (printf "%lld:%f\n" i (aref v i))))))

(test-xtfunc (memzone-test3)) ;; should print all 0.0's

(bind-func memzone-test4
  (lambda ()
    (memzone 1024 (* 44100 10)
      (let ((a:|5,double|* (alloc)))
	(aset! a 0 5.5)
	(aref a 0)))))

(test-xtfunc (memzone-test4) 5.50000)

;;
;; Large allocation of memory on BUILD (i.e. when the closure is created)
;; requires an optional argument (i.e. an amount of memory to allocate
;; specifically for closure creation)
;;
;; This memory is automatically free'd whenever you recompile the closure
;; (it will be destroyed and replaced by a new allocation of the
;;  same amount or whatever new amount you have allocated for closure
;;  compilation)
;;
(bind-func closure-zalloc-test 1000000
  (let ((k:|100000,double|* (zalloc)))
    (lambda ()
      (aset! k 0 1.0)
      (aref k 0))))

(test-xtfunc (closure-zalloc-test 1000000))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Ad-Hoc Polymorphism
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; extempore supports ad-hoc polymorphism
;; at some stage in the future this will
;; be implicit - but for the moment
;; it is explicitly defined using bind-poly

;; ad-hoc polymorphism allows you to provide
;; different specialisations depending on
;; type.  In other words, a single 'name'
;; can be bound to multiple function
;; implementations each with a uniqute
;; type.


;; poly variables can be for functions of
;; mixed argument lengths
;;
;; so for example:
(bind-func poly-test4
  (lambda (a:i8*)
    (printf "%s\n" a)))

(bind-func poly-test5
  (lambda (a:i8* b:i8*)
    (printf "%s %s\n" a b)))

(bind-func poly-test6
  (lambda (a:i8* b:i8* c:i8*)
    (printf "%s %s %s\n" a b c)))

;; bind these three functions to poly 'print'
(bind-poly testprint poly-test4)
(bind-poly testprint poly-test5)
(bind-poly testprint poly-test6)

(bind-func poly-test7
  (lambda ()
    (testprint "extempore's")
    (testprint "extempore's" "polymorphism")
    (testprint "extempore's" "polymorphism" "rocks")))

(test-xtfunc (poly-test7))

;; polys can Also specialize
;; on the return type
(bind-func poly-test8
  (lambda (a:double)
    (* a a)))

(bind-func poly-test9
  (lambda (a:double)
    (dtoi64 (* a a))))

(bind-poly sqrd poly-test8)
(bind-poly sqrd poly-test9)

;; specialize on [i64,double]*
;;
(bind-func poly-test10:[i64,double]*
  (lambda (a)
    (+ 1 (sqrd a))))

;; specialize on [double,doube]*
(bind-func poly-test11:[double,double]*
  (lambda (a)
    (+ 1.0 (sqrd a))))

(test-xtfunc (poly-test10 5.0))
(test-xtfunc (poly-test11 5.0))

;;;;;;;;;;;;;;;;;;
;; vector types

;; (bind-func vector-test1
;;   (lambda ()
;;     (let ((v1:/4,float/* (alloc))
;; 	  (v2:/4,float/* (alloc))
;; 	  (v3:/4,float/* (alloc)))
;;       (vfill! v1 4.0 3.0 2.0 1.0)
;;       (vfill! v2 1.0 2.0 3.0 4.0)
;;       (vfill! v3 5.0 5.0 5.0 5.0)
;;       (let ((v4 (* v1 v2))
;; 	    (v5 (> v3 v4))) ;; unforunately vector conditionals don't work!
;; 	(printf "mul:%f:%f:%f:%f\n" (ftod (vref v4 0)) (ftod (vref v4 1)) (ftod (vref v4 2)) (ftod (vref v4 3)))
;; 	(printf "cmp:%d:%d:%d:%d\n" (i1toi32 (vref v5 0)) (i1toi32 (vref v5 1)) (i1toi32 (vref v5 2)) (i1toi32 (vref v5 3)))
;; 	void))))

;; (test-xtfunc (vector-test1))

(bind-func vector-test2
  (lambda ()
    (let ((v1:/4,float/* (alloc))
	  (v2:/4,float/* (alloc)))
      (vfill! v1 1.0 2.0 4.0 8.0)
      (vfill! v2 2.0 2.5 2.25 2.125)
      (* v1 v2))))

(bind-func vector-test3
  (lambda ()
    (let ((a (vector-test2)))
      (printf "%f:%f:%f:%f\n"
	      (ftod (vref a 0))
	      (ftod (vref a 1))
	      (ftod (vref a 2))
	      (ftod (vref a 3)))
      void)))

(test-xtfunc (vector-test3))

;; vectorised sine func
(bind-func vsinf4
  (let ((p:/4,float/* (alloc))
	(b:/4,float/* (alloc))
	(c:/4,float/* (alloc))
	(f1:/4,float/* (alloc))
	(f2:/4,float/* (alloc))
	(i:i32 0)
	(p_ 0.225)
	(b_ (dtof (/ 4.0 PI)))
	(c_ (dtof (/ -4.0 (* PI PI)))))
    (dotimes (i 4) (vset! p i p_) (vset! b i b_) (vset! c i c_))
    (lambda (x:/4,float/)
      ;; no SIMD for abs yet!
      (dotimes (i 4) (vset! f1 i (fabs (vref x i))))
      (let ((y (+ (* b x) (* c x f1))))
	;; no SIMD for abs yet!
	(dotimes (i 4) (vset! f2 i (fabs (vref y i))))
	(+ (* p (- (* y f2) y)) y)))))

(bind-func vcosf4
  (let ((p:/4,float/* (alloc))
	(b:/4,float/* (alloc))
	(c:/4,float/* (alloc))
	(d:/4,float/* (alloc))
	(f1:/4,float/* (alloc))
	(f2:/4,float/* (alloc))
	(i:i32 0)
	(p_ 0.225)
	(d_ (dtof (/ PI 2.0)))
	(b_ (dtof (/ 4.0 PI)))
	(c_ (dtof (/ -4.0 (* PI PI)))))
    (dotimes (i 4)
      (vset! p i p_) (vset! b i b_) (vset! c i c_) (vset! d i d_))
    (lambda (x:/4,float/)
      ;; offset x for cos
      (set! x (+ x d))
      ;; no SIMD for abs yet!
      (dotimes (i 4) (vset! f1 i (fabs (vref x i))))
      (let ((y (+ (* b x) (* c x f1))))
	;; no SIMD for abs yet!
	(dotimes (i 4) (vset! f2 i (fabs (vref y i))))
	(+ (* p (- (* y f2) y)) y)))))


(bind-func vector-test4
  (lambda ()
    (let ((a:/4,float/* (alloc)))
      (vfill! a 0.1 0.2 0.3 0.4)
      (let ((b (vsinf4 (pref a 0)))
	    (c (vcosf4 (pref a 0))))
	(printf "precision inaccuracy is expected:\n")
	(printf " sinf:\t%f,%f,%f,%f\n"
		(ftod (sin 0.1:f))
		(ftod (sin 0.2:f))
		(ftod (sin 0.3:f))
		(ftod (sin 0.4:f)))
	(printf "vsinf:\t%f,%f,%f,%f\n"
		(ftod (vref b 0))
		(ftod (vref b 1))
		(ftod (vref b 2))
		(ftod (vref b 3)))
	(printf " cosf:\t%f,%f,%f,%f\n"
		(ftod (cos 0.1:f))
		(ftod (cos 0.2:f))
		(ftod (cos 0.3:f))
		(ftod (cos 0.4:f)))
	(printf "vcosf:\t%f,%f,%f,%f\n"
		(ftod (vref c 0))
		(ftod (vref c 1))
		(ftod (vref c 2))
		(ftod (vref c 3)))
	void))))

(test-xtfunc (vector-test4))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; syntax highlighting tests ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; these don't return any values, they're visual tests---do they look
;; right?

(bind-func hl_test1a:[i32,double,|4,i32|**]* 4000
  "docstring"
  (lambda (a b)
    (printf "done\n")))

(bind-func hl_test1b:[i32]*
  (lambda ()
    (let ((i:i32 6))
      (printf "done\n"))))

(bind-val hl_test2 <i32,i32>)
(bind-val hl_test3 |4,i8|)
(bind-val hl_test4 double* 10)
(bind-val hl_test5 i8* "teststr")

(bind-type hl_test_type <i64>)

(println '(bind-lib testlib testfn [i32,i32]*))

;; (and 4 5)
;; (bind-val hl_test4 double* 10)
;; (bind-type hl_test_type <i64>)
;; (bind-lib testlib testfn [i32,i32]*)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; FINISH!
;;
;; print out the results of all the tests!

(print-test-results)

(println 'total-time: (* 1.0 (/ (- (now) start_time) *samplerate*)) 'seconds)
