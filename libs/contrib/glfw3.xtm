;;; glfw3.xtm -- xtlang bindings for GLFW3

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libglfw3

;;; Commentary:

;; 

;;; Code:

(sys:load "libs/external/gl2.xtm")

(define libglfw3
  (let ((platform (sys:platform)))
    (cond ((string=? platform "Linux") (sys:open-dylib "libglfw3.so"))
          ((string=? platform "Windows") (sys:open-dylib "libglfw3.dll"))
          ((string=? platform "OSX") (sys:open-dylib "libglfw3.dylib"))
          (else (print "Unknown platform: " platform)))))

;; /*************************************************************************
;;  * GLFW API tokens
;;  *************************************************************************/

;; /*! @name GLFW version macros
;;  *  @{ */
;; /*! @brief The major version number of the GLFW library.
;;  *
;;  *  This is incremented when the API is changed in non-compatible ways.
;;  *  @ingroup init
;;  */
(bind-val GLFW_VERSION_MAJOR i32 3)
;; /*! @brief The minor version number of the GLFW library.
;;  *
;;  *  This is incremented when features are added to the API but it remains
;;  *  backward-compatible.
;;  *  @ingroup init
;;  */
(bind-val GLFW_VERSION_MINOR i32 0)
;; /*! @brief The revision number of the GLFW library.
;;  *
;;  *  This is incremented when a bug fix release is made that does not contain any
;;  *  API changes.
;;  *  @ingroup init
;;  */
(bind-val GLFW_VERSION_REVISION i32 4)
;; /*! @} */

;; /*! @name Key and button actions
;;  *  @{ */
;; /*! @brief The key or button was released.
;;  *  @ingroup input
;;  */
(bind-val GLFW_RELEASE i32 0)
;; /*! @brief The key or button was pressed.
;;  *  @ingroup input
;;  */
(bind-val GLFW_PRESS i32 1)
;; /*! @brief The key was held down until it repeated.
;;  *  @ingroup input
;;  */
(bind-val GLFW_REPEAT i32 2)
;; /*! @} */

;; /*! @defgroup keys Keyboard keys
;;  *
;;  * These key codes are inspired by the *USB HID Usage Tables v1.12* (p. 53-60),
;;  * but re-arranged to map to 7-bit ASCII for printable keys (function keys are
;;  * put in the 256+ range).
;;  *
;;  * The naming of the key codes follow these rules:
;;  *  - The US keyboard layout is used
;;  *  - Names of printable alpha-numeric characters are used (e.g. "A", "R",
;;  *    "3", etc.)
;;  *  - For non-alphanumeric characters, Unicode:ish names are used (e.g.
;;  *    "COMMA", "LEFT_SQUARE_BRACKET", etc.). Note that some names do not
;;  *    correspond to the Unicode standard (usually for brevity)
;;  *  - Keys that lack a clear US mapping are named "WORLD_x"
;;  *  - For non-printable keys, custom names are used (e.g. "F4",
;;  *    "BACKSPACE", etc.)
;;  *
;;  *  @ingroup input
;;  *  @{
;;  */

;; /* The unknown key */
(bind-val GLFW_KEY_UNKNOWN i32 -1)

;; /* Printable keys */
(bind-val GLFW_KEY_SPACE i32 32)
(bind-val GLFW_KEY_APOSTROPHE i32 39)
(bind-val GLFW_KEY_COMMA i32 44)
(bind-val GLFW_KEY_MINUS i32 45)
(bind-val GLFW_KEY_PERIOD i32 46)
(bind-val GLFW_KEY_SLASH i32 47)
(bind-val GLFW_KEY_0 i32 48)
(bind-val GLFW_KEY_1 i32 49)
(bind-val GLFW_KEY_2 i32 50)
(bind-val GLFW_KEY_3 i32 51)
(bind-val GLFW_KEY_4 i32 52)
(bind-val GLFW_KEY_5 i32 53)
(bind-val GLFW_KEY_6 i32 54)
(bind-val GLFW_KEY_7 i32 55)
(bind-val GLFW_KEY_8 i32 56)
(bind-val GLFW_KEY_9 i32 57)
(bind-val GLFW_KEY_SEMICOLON i32 59)
(bind-val GLFW_KEY_EQUAL i32 61)
(bind-val GLFW_KEY_A i32 65)
(bind-val GLFW_KEY_B i32 66)
(bind-val GLFW_KEY_C i32 67)
(bind-val GLFW_KEY_D i32 68)
(bind-val GLFW_KEY_E i32 69)
(bind-val GLFW_KEY_F i32 70)
(bind-val GLFW_KEY_G i32 71)
(bind-val GLFW_KEY_H i32 72)
(bind-val GLFW_KEY_I i32 73)
(bind-val GLFW_KEY_J i32 74)
(bind-val GLFW_KEY_K i32 75)
(bind-val GLFW_KEY_L i32 76)
(bind-val GLFW_KEY_M i32 77)
(bind-val GLFW_KEY_N i32 78)
(bind-val GLFW_KEY_O i32 79)
(bind-val GLFW_KEY_P i32 80)
(bind-val GLFW_KEY_Q i32 81)
(bind-val GLFW_KEY_R i32 82)
(bind-val GLFW_KEY_S i32 83)
(bind-val GLFW_KEY_T i32 84)
(bind-val GLFW_KEY_U i32 85)
(bind-val GLFW_KEY_V i32 86)
(bind-val GLFW_KEY_W i32 87)
(bind-val GLFW_KEY_X i32 88)
(bind-val GLFW_KEY_Y i32 89)
(bind-val GLFW_KEY_Z i32 90)
(bind-val GLFW_KEY_LEFT_BRACKET i32 91)
(bind-val GLFW_KEY_BACKSLASH i32 92)
(bind-val GLFW_KEY_RIGHT_BRACKET i32 93)
(bind-val GLFW_KEY_GRAVE_ACCENT i32 96)
(bind-val GLFW_KEY_WORLD_1 i32 161)
(bind-val GLFW_KEY_WORLD_2 i32 162)

;; /* Function keys */
(bind-val GLFW_KEY_ESCAPE i32 256)
(bind-val GLFW_KEY_ENTER i32 257)
(bind-val GLFW_KEY_TAB i32 258)
(bind-val GLFW_KEY_BACKSPACE i32 259)
(bind-val GLFW_KEY_INSERT i32 260)
(bind-val GLFW_KEY_DELETE i32 261)
(bind-val GLFW_KEY_RIGHT i32 262)
(bind-val GLFW_KEY_LEFT i32 263)
(bind-val GLFW_KEY_DOWN i32 264)
(bind-val GLFW_KEY_UP i32 265)
(bind-val GLFW_KEY_PAGE_UP i32 266)
(bind-val GLFW_KEY_PAGE_DOWN i32 267)
(bind-val GLFW_KEY_HOME i32 268)
(bind-val GLFW_KEY_END i32 269)
(bind-val GLFW_KEY_CAPS_LOCK i32 280)
(bind-val GLFW_KEY_SCROLL_LOCK i32 281)
(bind-val GLFW_KEY_NUM_LOCK i32 282)
(bind-val GLFW_KEY_PRINT_SCREEN i32 283)
(bind-val GLFW_KEY_PAUSE i32 284)
(bind-val GLFW_KEY_F1 i32 290)
(bind-val GLFW_KEY_F2 i32 291)
(bind-val GLFW_KEY_F3 i32 292)
(bind-val GLFW_KEY_F4 i32 293)
(bind-val GLFW_KEY_F5 i32 294)
(bind-val GLFW_KEY_F6 i32 295)
(bind-val GLFW_KEY_F7 i32 296)
(bind-val GLFW_KEY_F8 i32 297)
(bind-val GLFW_KEY_F9 i32 298)
(bind-val GLFW_KEY_F10 i32 299)
(bind-val GLFW_KEY_F11 i32 300)
(bind-val GLFW_KEY_F12 i32 301)
(bind-val GLFW_KEY_F13 i32 302)
(bind-val GLFW_KEY_F14 i32 303)
(bind-val GLFW_KEY_F15 i32 304)
(bind-val GLFW_KEY_F16 i32 305)
(bind-val GLFW_KEY_F17 i32 306)
(bind-val GLFW_KEY_F18 i32 307)
(bind-val GLFW_KEY_F19 i32 308)
(bind-val GLFW_KEY_F20 i32 309)
(bind-val GLFW_KEY_F21 i32 310)
(bind-val GLFW_KEY_F22 i32 311)
(bind-val GLFW_KEY_F23 i32 312)
(bind-val GLFW_KEY_F24 i32 313)
(bind-val GLFW_KEY_F25 i32 314)
(bind-val GLFW_KEY_KP_0 i32 320)
(bind-val GLFW_KEY_KP_1 i32 321)
(bind-val GLFW_KEY_KP_2 i32 322)
(bind-val GLFW_KEY_KP_3 i32 323)
(bind-val GLFW_KEY_KP_4 i32 324)
(bind-val GLFW_KEY_KP_5 i32 325)
(bind-val GLFW_KEY_KP_6 i32 326)
(bind-val GLFW_KEY_KP_7 i32 327)
(bind-val GLFW_KEY_KP_8 i32 328)
(bind-val GLFW_KEY_KP_9 i32 329)
(bind-val GLFW_KEY_KP_DECIMAL i32 330)
(bind-val GLFW_KEY_KP_DIVIDE i32 331)
(bind-val GLFW_KEY_KP_MULTIPLY i32 332)
(bind-val GLFW_KEY_KP_SUBTRACT i32 333)
(bind-val GLFW_KEY_KP_ADD i32 334)
(bind-val GLFW_KEY_KP_ENTER i32 335)
(bind-val GLFW_KEY_KP_EQUAL i32 336)
(bind-val GLFW_KEY_LEFT_SHIFT i32 340)
(bind-val GLFW_KEY_LEFT_CONTROL i32 341)
(bind-val GLFW_KEY_LEFT_ALT i32 342)
(bind-val GLFW_KEY_LEFT_SUPER i32 343)
(bind-val GLFW_KEY_RIGHT_SHIFT i32 344)
(bind-val GLFW_KEY_RIGHT_CONTROL i32 345)
(bind-val GLFW_KEY_RIGHT_ALT i32 346)
(bind-val GLFW_KEY_RIGHT_SUPER i32 347)
(bind-val GLFW_KEY_MENU i32 348)
(bind-val GLFW_KEY_LAST i32 348) ;; GLFW_KEY_MENU

;; /*! @} */

;; /*! @defgroup mods Modifier key flags
;;  *  @ingroup input
;;  *  @{ */

;; /*! @brief If this bit is set one or more Shift keys were held down.
;;  */
(bind-val GLFW_MOD_SHIFT i32 #x0001)
;; /*! @brief If this bit is set one or more Control keys were held down.
;;  */
(bind-val GLFW_MOD_CONTROL i32 #x0002)
;; /*! @brief If this bit is set one or more Alt keys were held down.
;;  */
(bind-val GLFW_MOD_ALT i32 #x0004)
;; /*! @brief If this bit is set one or more Super keys were held down.
;;  */
(bind-val GLFW_MOD_SUPER i32 #x0008)

;; /*! @} */

;; /*! @defgroup buttons Mouse buttons
;;  *  @ingroup input
;;  *  @{ */
(bind-val GLFW_MOUSE_BUTTON_1 i32 0)
(bind-val GLFW_MOUSE_BUTTON_2 i32 1)
(bind-val GLFW_MOUSE_BUTTON_3 i32 2)
(bind-val GLFW_MOUSE_BUTTON_4 i32 3)
(bind-val GLFW_MOUSE_BUTTON_5 i32 4)
(bind-val GLFW_MOUSE_BUTTON_6 i32 5)
(bind-val GLFW_MOUSE_BUTTON_7 i32 6)
(bind-val GLFW_MOUSE_BUTTON_8 i32 7)
(bind-val GLFW_MOUSE_BUTTON_LAST i32 7)
(bind-val GLFW_MOUSE_BUTTON_LEFT i32 0)
(bind-val GLFW_MOUSE_BUTTON_RIGHT i32 1)
(bind-val GLFW_MOUSE_BUTTON_MIDDLE i32 2)
;; /*! @} */

;; /*! @defgroup joysticks Joysticks
;;  *  @ingroup input
;;  *  @{ */
(bind-val GLFW_JOYSTICK_1 i32 0)
(bind-val GLFW_JOYSTICK_2 i32 1)
(bind-val GLFW_JOYSTICK_3 i32 2)
(bind-val GLFW_JOYSTICK_4 i32 3)
(bind-val GLFW_JOYSTICK_5 i32 4)
(bind-val GLFW_JOYSTICK_6 i32 5)
(bind-val GLFW_JOYSTICK_7 i32 6)
(bind-val GLFW_JOYSTICK_8 i32 7)
(bind-val GLFW_JOYSTICK_9 i32 8)
(bind-val GLFW_JOYSTICK_10 i32 9)
(bind-val GLFW_JOYSTICK_11 i32 10)
(bind-val GLFW_JOYSTICK_12 i32 11)
(bind-val GLFW_JOYSTICK_13 i32 12)
(bind-val GLFW_JOYSTICK_14 i32 13)
(bind-val GLFW_JOYSTICK_15 i32 14)
(bind-val GLFW_JOYSTICK_16 i32 15)
(bind-val GLFW_JOYSTICK_LAST i32 15)
;; /*! @} */

;; /*! @defgroup errors Error codes
;;  *  @ingroup error
;;  *  @{ */
;; /*! @brief GLFW has not been initialized.
;;  */
(bind-val GLFW_NOT_INITIALIZED i32 #x00010001)
;; /*! @brief No context is current for this thread.
;;  */
(bind-val GLFW_NO_CURRENT_CONTEXT i32 #x00010002)
;; /*! @brief One of the enum parameters for the function was given an invalid
;;  *  enum.
;;  */
(bind-val GLFW_INVALID_ENUM i32 #x00010003)
;; /*! @brief One of the parameters for the function was given an invalid value.
;;  */
(bind-val GLFW_INVALID_VALUE i32 #x00010004)
;; /*! @brief A memory allocation failed.
;;  */
(bind-val GLFW_OUT_OF_MEMORY i32 #x00010005)
;; /*! @brief GLFW could not find support for the requested client API on the
;;  *  system.
;;  */
(bind-val GLFW_API_UNAVAILABLE i32 #x00010006)
;; /*! @brief The requested client API version is not available.
;;  */
(bind-val GLFW_VERSION_UNAVAILABLE i32 #x00010007)
;; /*! @brief A platform-specific error occurred that does not match any of the
;;  *  more specific categories.
;;  */
(bind-val GLFW_PLATFORM_ERROR i32 #x00010008)
;; /*! @brief The clipboard did not contain data in the requested format.
;;  */
(bind-val GLFW_FORMAT_UNAVAILABLE i32 #x00010009)
;; /*! @} */

(bind-val GLFW_FOCUSED i32 #x00020001)
(bind-val GLFW_ICONIFIED i32 #x00020002)
(bind-val GLFW_RESIZABLE i32 #x00020003)
(bind-val GLFW_VISIBLE i32 #x00020004)
(bind-val GLFW_DECORATED i32 #x00020005)

(bind-val GLFW_RED_BITS i32 #x00021001)
(bind-val GLFW_GREEN_BITS i32 #x00021002)
(bind-val GLFW_BLUE_BITS i32 #x00021003)
(bind-val GLFW_ALPHA_BITS i32 #x00021004)
(bind-val GLFW_DEPTH_BITS i32 #x00021005)
(bind-val GLFW_STENCIL_BITS i32 #x00021006)
(bind-val GLFW_ACCUM_RED_BITS i32 #x00021007)
(bind-val GLFW_ACCUM_GREEN_BITS i32 #x00021008)
(bind-val GLFW_ACCUM_BLUE_BITS i32 #x00021009)
(bind-val GLFW_ACCUM_ALPHA_BITS i32 #x0002100A)
(bind-val GLFW_AUX_BUFFERS i32 #x0002100B)
(bind-val GLFW_STEREO i32 #x0002100C)
(bind-val GLFW_SAMPLES i32 #x0002100D)
(bind-val GLFW_SRGB_CAPABLE i32 #x0002100E)
(bind-val GLFW_REFRESH_RATE i32 #x0002100F)

(bind-val GLFW_CLIENT_API i32 #x00022001)
(bind-val GLFW_CONTEXT_VERSION_MAJOR i32 #x00022002)
(bind-val GLFW_CONTEXT_VERSION_MINOR i32 #x00022003)
(bind-val GLFW_CONTEXT_REVISION i32 #x00022004)
(bind-val GLFW_CONTEXT_ROBUSTNESS i32 #x00022005)
(bind-val GLFW_OPENGL_FORWARD_COMPAT i32 #x00022006)
(bind-val GLFW_OPENGL_DEBUG_CONTEXT i32 #x00022007)
(bind-val GLFW_OPENGL_PROFILE i32 #x00022008)

(bind-val GLFW_OPENGL_API i32 #x00030001)
(bind-val GLFW_OPENGL_ES_API i32 #x00030002)

(bind-val GLFW_NO_ROBUSTNESS i32 0)
(bind-val GLFW_NO_RESET_NOTIFICATION i32 #x00031001)
(bind-val GLFW_LOSE_CONTEXT_ON_RESET i32 #x00031002)

(bind-val GLFW_OPENGL_ANY_PROFILE i32 0)
(bind-val GLFW_OPENGL_CORE_PROFILE i32 #x00032001)
(bind-val GLFW_OPENGL_COMPAT_PROFILE i32 #x00032002)

(bind-val GLFW_CURSOR i32 #x00033001)
(bind-val GLFW_STICKY_KEYS i32 #x00033002)
(bind-val GLFW_STICKY_MOUSE_BUTTONS i32 #x00033003)

(bind-val GLFW_CURSOR_NORMAL i32 #x00034001)
(bind-val GLFW_CURSOR_HIDDEN i32 #x00034002)
(bind-val GLFW_CURSOR_DISABLED i32 #x00034003)

(bind-val GLFW_CONNECTED i32 #x00040001)
(bind-val GLFW_DISCONNECTED i32 #x00040002)


;; /*************************************************************************
;;  * GLFW API types
;;  *************************************************************************/

;; /*! @brief Client API function pointer type.
;;  *
;;  *  Generic function pointer used for returning client API function pointers
;;  *  without forcing a cast from a regular pointer.
;;  *
;;  *  @ingroup context
;;  */
(bind-alias GLFWglproc [void]*)

;; /*! @brief Opaque monitor object.
;;  *
;;  *  Opaque monitor object.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-alias GLFWmonitor i8)

;; /*! @brief Opaque window object.
;;  *
;;  *  Opaque window object.
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWwindow i8)

;; /*! @brief The function signature for error callbacks.
;;  *
;;  *  This is the function signature for error callback functions.
;;  *
;;  *  @param[in] error An [error code](@ref errors).
;;  *  @param[in] description A UTF-8 encoded string describing the error.
;;  *
;;  *  @sa glfwSetErrorCallback
;;  *
;;  *  @ingroup error
;;  */
(bind-alias GLFWerrorfun [void,i32,i8*]*)

;; /*! @brief The function signature for window position callbacks.
;;  *
;;  *  This is the function signature for window position callback functions.
;;  *
;;  *  @param[in] window The window that the user moved.
;;  *  @param[in] xpos The new x-coordinate, in screen coordinates, of the
;;  *  upper-left corner of the client area of the window.
;;  *  @param[in] ypos The new y-coordinate, in screen coordinates, of the
;;  *  upper-left corner of the client area of the window.
;;  *
;;  *  @sa glfwSetWindowPosCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWwindowposfun [void,GLFWwindow*,i32,i32]*)

;; /*! @brief The function signature for window resize callbacks.
;;  *
;;  *  This is the function signature for window size callback functions.
;;  *
;;  *  @param[in] window The window that the user resized.
;;  *  @param[in] width The new width, in screen coordinates, of the window.
;;  *  @param[in] height The new height, in screen coordinates, of the window.
;;  *
;;  *  @sa glfwSetWindowSizeCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWwindowsizefun [void,GLFWwindow*,i32,i32]*)

;; /*! @brief The function signature for window close callbacks.
;;  *
;;  *  This is the function signature for window close callback functions.
;;  *
;;  *  @param[in] window The window that the user attempted to close.
;;  *
;;  *  @sa glfwSetWindowCloseCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWwindowclosefun [void,GLFWwindow*]*)

;; /*! @brief The function signature for window content refresh callbacks.
;;  *
;;  *  This is the function signature for window refresh callback functions.
;;  *
;;  *  @param[in] window The window whose content needs to be refreshed.
;;  *
;;  *  @sa glfwSetWindowRefreshCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWwindowrefreshfun [void,GLFWwindow*]*)

;; /*! @brief The function signature for window focus/defocus callbacks.
;;  *
;;  *  This is the function signature for window focus callback functions.
;;  *
;;  *  @param[in] window The window that was focused or defocused.
;;  *  @param[in] focused `GL_TRUE` if the window was focused, or `GL_FALSE` if
;;  *  it was defocused.
;;  *
;;  *  @sa glfwSetWindowFocusCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWwindowfocusfun [void,GLFWwindow*,i32]*)

;; /*! @brief The function signature for window iconify/restore callbacks.
;;  *
;;  *  This is the function signature for window iconify/restore callback
;;  *  functions.
;;  *
;;  *  @param[in] window The window that was iconified or restored.
;;  *  @param[in] iconified `GL_TRUE` if the window was iconified, or `GL_FALSE`
;;  *  if it was restored.
;;  *
;;  *  @sa glfwSetWindowIconifyCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWwindowiconifyfun [void,GLFWwindow*,i32]*)

;; /*! @brief The function signature for framebuffer resize callbacks.
;;  *
;;  *  This is the function signature for framebuffer resize callback
;;  *  functions.
;;  *
;;  *  @param[in] window The window whose framebuffer was resized.
;;  *  @param[in] width The new width, in pixels, of the framebuffer.
;;  *  @param[in] height The new height, in pixels, of the framebuffer.
;;  *
;;  *  @sa glfwSetFramebufferSizeCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-alias GLFWframebuffersizefun [void,GLFWwindow*,i32,i32]*)

;; /*! @brief The function signature for mouse button callbacks.
;;  *
;;  *  This is the function signature for mouse button callback functions.
;;  *
;;  *  @param[in] window The window that received the event.
;;  *  @param[in] button The [mouse button](@ref buttons) that was pressed or
;;  *  released.
;;  *  @param[in] action One of `GLFW_PRESS` or `GLFW_RELEASE`.
;;  *  @param[in] mods Bit field describing which [modifier keys](@ref mods) were
;;  *  held down.
;;  *
;;  *  @sa glfwSetMouseButtonCallback
;;  *
;;  *  @ingroup input
;;  */
(bind-alias GLFWmousebuttonfun [void,GLFWwindow*,i32,i32,i32]*)

;; /*! @brief The function signature for cursor position callbacks.
;;  *
;;  *  This is the function signature for cursor position callback functions.
;;  *
;;  *  @param[in] window The window that received the event.
;;  *  @param[in] xpos The new x-coordinate, in screen coordinates, of the cursor.
;;  *  @param[in] ypos The new y-coordinate, in screen coordinates, of the cursor.
;;  *
;;  *  @sa glfwSetCursorPosCallback
;;  *
;;  *  @ingroup input
;;  */
(bind-alias GLFWcursorposfun [void,GLFWwindow*,double,double]*)

;; /*! @brief The function signature for cursor enter/leave callbacks.
;;  *
;;  *  This is the function signature for cursor enter/leave callback functions.
;;  *
;;  *  @param[in] window The window that received the event.
;;  *  @param[in] entered `GL_TRUE` if the cursor entered the window's client
;;  *  area, or `GL_FALSE` if it left it.
;;  *
;;  *  @sa glfwSetCursorEnterCallback
;;  *
;;  *  @ingroup input
;;  */
(bind-alias GLFWcursorenterfun [void,GLFWwindow*,i32]*)

;; /*! @brief The function signature for scroll callbacks.
;;  *
;;  *  This is the function signature for scroll callback functions.
;;  *
;;  *  @param[in] window The window that received the event.
;;  *  @param[in] xoffset The scroll offset along the x-axis.
;;  *  @param[in] yoffset The scroll offset along the y-axis.
;;  *
;;  *  @sa glfwSetScrollCallback
;;  *
;;  *  @ingroup input
;;  */
(bind-alias GLFWscrollfun [void,GLFWwindow*,double,double]*)

;; /*! @brief The function signature for keyboard key callbacks.
;;  *
;;  *  This is the function signature for keyboard key callback functions.
;;  *
;;  *  @param[in] window The window that received the event.
;;  *  @param[in] key The [keyboard key](@ref keys) that was pressed or released.
;;  *  @param[in] scancode The system-specific scancode of the key.
;;  *  @param[in] action @ref GLFW_PRESS, @ref GLFW_RELEASE or @ref GLFW_REPEAT.
;;  *  @param[in] mods Bit field describing which [modifier keys](@ref mods) were
;;  *  held down.
;;  *
;;  *  @sa glfwSetKeyCallback
;;  *
;;  *  @ingroup input
;;  */
(bind-alias GLFWkeyfun [void,GLFWwindow*,i32,i32,i32,i32]*)

;; /*! @brief The function signature for Unicode character callbacks.
;;  *
;;  *  This is the function signature for Unicode character callback functions.
;;  *
;;  *  @param[in] window The window that received the event.
;;  *  @param[in] codepoint The Unicode code point of the character.
;;  *
;;  *  @sa glfwSetCharCallback
;;  *
;;  *  @ingroup input
;;  */
(bind-alias GLFWcharfun [void,GLFWwindow*,i32]*)

;; /*! @brief The function signature for monitor configuration callbacks.
;;  *
;;  *  This is the function signature for monitor configuration callback functions.
;;  *
;;  *  @param[in] monitor The monitor that was connected or disconnected.
;;  *  @param[in] event One of `GLFW_CONNECTED` or `GLFW_DISCONNECTED`.
;;  *
;;  *  @sa glfwSetMonitorCallback
;;  *
;;  *  @ingroup monitor
;;  */
(bind-alias GLFWmonitorfun [void,GLFWmonitor*,i32]*)

;; /*! @brief Video mode type.
;;  *
;;  *  This describes a single video mode.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-type GLFWvidmode <i32,i32,i32,i32,i32,i32>)
;; {
    ;; /*! The width, in screen coordinates, of the video mode.
    ;;  */
    ;; int width;
    ;; /*! The height, in screen coordinates, of the video mode.
    ;;  */
    ;; int height;
    ;; /*! The bit depth of the red channel of the video mode.
    ;;  */
    ;; int redBits;
    ;; /*! The bit depth of the green channel of the video mode.
    ;;  */
    ;; int greenBits;
    ;; /*! The bit depth of the blue channel of the video mode.
    ;;  */
    ;; int blueBits;
    ;; /*! The refresh rate, in Hz, of the video mode.
    ;;  */
    ;; int refreshRate;
;; } GLFWvidmode;

;; /*! @brief Gamma ramp.
;;  *
;;  *  This describes the gamma ramp for a monitor.
;;  *
;;  *  @sa glfwGetGammaRamp glfwSetGammaRamp
;;  *
;;  *  @ingroup monitor
;;  */
(bind-alias GLFWgammaramp <i16,i16,i16,i32>)
;; {
    ;; /*! An array of value describing the response of the red channel.
    ;;  */
    ;; unsigned short* red;
    ;; /*! An array of value describing the response of the green channel.
    ;;  */
    ;; unsigned short* green;
    ;; /*! An array of value describing the response of the blue channel.
    ;;  */
    ;; unsigned short* blue;
    ;; /*! The number of elements in each array.
    ;;  */
    ;; unsigned int size;
;; } GLFWgammaramp;


;; /*************************************************************************
;;  * GLFW API functions
;;  *************************************************************************/

;; /*! @brief Initializes the GLFW library.
;;  *
;;  *  This function initializes the GLFW library.  Before most GLFW functions can
;;  *  be used, GLFW must be initialized, and before a program terminates GLFW
;;  *  should be terminated in order to free any resources allocated during or
;;  *  after initialization.
;;  *
;;  *  If this function fails, it calls @ref glfwTerminate before returning.  If it
;;  *  succeeds, you should call @ref glfwTerminate before the program exits.
;;  *
;;  *  Additional calls to this function after successful initialization but before
;;  *  termination will succeed but will do nothing.
;;  *
;;  *  @return `GL_TRUE` if successful, or `GL_FALSE` if an error occurred.
;;  *
;;  *  @par New in GLFW 3
;;  *  This function no longer registers @ref glfwTerminate with `atexit`.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @note **OS X:** This function will change the current directory of the
;;  *  application to the `Contents/Resources` subdirectory of the application's
;;  *  bundle, if present.
;;  *
;;  *  @sa glfwTerminate
;;  *
;;  *  @ingroup init
;;  */
(bind-lib libglfw3 glfwInit [i32]*)

;; /*! @brief Terminates the GLFW library.
;;  *
;;  *  This function destroys all remaining windows, frees any allocated resources
;;  *  and sets the library to an uninitialized state.  Once this is called, you
;;  *  must again call @ref glfwInit successfully before you will be able to use
;;  *  most GLFW functions.
;;  *
;;  *  If GLFW has been successfully initialized, this function should be called
;;  *  before the program exits.  If initialization fails, there is no need to call
;;  *  this function, as it is called by @ref glfwInit before it returns failure.
;;  *
;;  *  @remarks This function may be called before @ref glfwInit.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @warning No window's context may be current on another thread when this
;;  *  function is called.
;;  *
;;  *  @sa glfwInit
;;  *
;;  *  @ingroup init
;;  */
(bind-lib libglfw3 glfwTerminate [void]*)

;; /*! @brief Retrieves the version of the GLFW library.
;;  *
;;  *  This function retrieves the major, minor and revision numbers of the GLFW
;;  *  library.  It is intended for when you are using GLFW as a shared library and
;;  *  want to ensure that you are using the minimum required version.
;;  *
;;  *  @param[out] major Where to store the major version number, or `NULL`.
;;  *  @param[out] minor Where to store the minor version number, or `NULL`.
;;  *  @param[out] rev Where to store the revision number, or `NULL`.
;;  *
;;  *  @remarks This function may be called before @ref glfwInit.
;;  *
;;  *  @remarks This function may be called from any thread.
;;  *
;;  *  @sa glfwGetVersionString
;;  *
;;  *  @ingroup init
;;  */
(bind-lib libglfw3 glfwGetVersion [void,i32*,i32*,i32*]*)

;; /*! @brief Returns a string describing the compile-time configuration.
;;  *
;;  *  This function returns a static string generated at compile-time according to
;;  *  which configuration macros were defined.  This is intended for use when
;;  *  submitting bug reports, to allow developers to see which code paths are
;;  *  enabled in a binary.
;;  *
;;  *  The format of the string is as follows:
;;  *  - The version of GLFW
;;  *  - The name of the window system API
;;  *  - The name of the context creation API
;;  *  - Any additional options or APIs
;;  *
;;  *  For example, when compiling GLFW 3.0 with MinGW using the Win32 and WGL
;;  *  back ends, the version string may look something like this:
;;  *
;;  *      3.0.0 Win32 WGL MinGW
;;  *
;;  *  @return The GLFW version string.
;;  *
;;  *  @remarks This function may be called before @ref glfwInit.
;;  *
;;  *  @remarks This function may be called from any thread.
;;  *
;;  *  @sa glfwGetVersion
;;  *
;;  *  @ingroup init
;;  */
(bind-lib libglfw3 glfwGetVersionString [i8*]*)

;; /*! @brief Sets the error callback.
;;  *
;;  *  This function sets the error callback, which is called with an error code
;;  *  and a human-readable description each time a GLFW error occurs.
;;  *
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @remarks This function may be called before @ref glfwInit.
;;  *
;;  *  @note The error callback is called by the thread where the error was
;;  *  generated.  If you are using GLFW from multiple threads, your error callback
;;  *  needs to be written accordingly.
;;  *
;;  *  @note Because the description string provided to the callback may have been
;;  *  generated specifically for that error, it is not guaranteed to be valid
;;  *  after the callback has returned.  If you wish to use it after that, you need
;;  *  to make your own copy of it before returning.
;;  *
;;  *  @ingroup error
;;  */
(bind-lib libglfw3 glfwSetErrorCallback [GLFWerrorfun,GLFWerrorfun]*)

;; /*! @brief Returns the currently connected monitors.
;;  *
;;  *  This function returns an array of handles for all currently connected
;;  *  monitors.
;;  *
;;  *  @param[out] count Where to store the size of the returned array.  This is
;;  *  set to zero if an error occurred.
;;  *  @return An array of monitor handles, or `NULL` if an error occurred.
;;  *
;;  *  @note The returned array is allocated and freed by GLFW.  You should not
;;  *  free it yourself.
;;  *
;;  *  @note The returned array is valid only until the monitor configuration
;;  *  changes.  See @ref glfwSetMonitorCallback to receive notifications of
;;  *  configuration changes.
;;  *
;;  *  @sa glfwGetPrimaryMonitor
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetMonitors [GLFWmonitor**,i32*]*)

;; /*! @brief Returns the primary monitor.
;;  *
;;  *  This function returns the primary monitor.  This is usually the monitor
;;  *  where elements like the Windows task bar or the OS X menu bar is located.
;;  *
;;  *  @return The primary monitor, or `NULL` if an error occurred.
;;  *
;;  *  @sa glfwGetMonitors
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetPrimaryMonitor [GLFWmonitor*]*)

;; /*! @brief Returns the position of the monitor's viewport on the virtual screen.
;;  *
;;  *  This function returns the position, in screen coordinates, of the upper-left
;;  *  corner of the specified monitor.
;;  *
;;  *  @param[in] monitor The monitor to query.
;;  *  @param[out] xpos Where to store the monitor x-coordinate, or `NULL`.
;;  *  @param[out] ypos Where to store the monitor y-coordinate, or `NULL`.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetMonitorPos [void,GLFWmonitor*,i32*,i32*]*)

;; /*! @brief Returns the physical size of the monitor.
;;  *
;;  *  This function returns the size, in millimetres, of the display area of the
;;  *  specified monitor.
;;  *
;;  *  @param[in] monitor The monitor to query.
;;  *  @param[out] width Where to store the width, in mm, of the monitor's display
;;  *  area, or `NULL`.
;;  *  @param[out] height Where to store the height, in mm, of the monitor's
;;  *  display area, or `NULL`.
;;  *
;;  *  @note Some operating systems do not provide accurate information, either
;;  *  because the monitor's EDID data is incorrect, or because the driver does not
;;  *  report it accurately.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetMonitorPhysicalSize [void,GLFWmonitor*,i32*,i32*]*)

;; /*! @brief Returns the name of the specified monitor.
;;  *
;;  *  This function returns a human-readable name, encoded as UTF-8, of the
;;  *  specified monitor.
;;  *
;;  *  @param[in] monitor The monitor to query.
;;  *  @return The UTF-8 encoded name of the monitor, or `NULL` if an error
;;  *  occurred.
;;  *
;;  *  @note The returned string is allocated and freed by GLFW.  You should not
;;  *  free it yourself.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetMonitorName [i8*,GLFWmonitor*]*)

;; /*! @brief Sets the monitor configuration callback.
;;  *
;;  *  This function sets the monitor configuration callback, or removes the
;;  *  currently set callback.  This is called when a monitor is connected to or
;;  *  disconnected from the system.
;;  *
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @bug **X11:** This callback is not yet called on monitor configuration
;;  *  changes.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwSetMonitorCallback [GLFWmonitorfun,GLFWmonitorfun]*)

;; /*! @brief Returns the available video modes for the specified monitor.
;;  *
;;  *  This function returns an array of all video modes supported by the specified
;;  *  monitor.  The returned array is sorted in ascending order, first by color
;;  *  bit depth (the sum of all channel depths) and then by resolution area (the
;;  *  product of width and height).
;;  *
;;  *  @param[in] monitor The monitor to query.
;;  *  @param[out] count Where to store the number of video modes in the returned
;;  *  array.  This is set to zero if an error occurred.
;;  *  @return An array of video modes, or `NULL` if an error occurred.
;;  *
;;  *  @note The returned array is allocated and freed by GLFW.  You should not
;;  *  free it yourself.
;;  *
;;  *  @note The returned array is valid only until this function is called again
;;  *  for the specified monitor.
;;  *
;;  *  @sa glfwGetVideoMode
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetVideoModes [GLFWvidmode*,GLFWmonitor*,i32*]*)

;; /*! @brief Returns the current mode of the specified monitor.
;;  *
;;  *  This function returns the current video mode of the specified monitor.  If
;;  *  you are using a full screen window, the return value will therefore depend
;;  *  on whether it is focused.
;;  *
;;  *  @param[in] monitor The monitor to query.
;;  *  @return The current mode of the monitor, or `NULL` if an error occurred.
;;  *
;;  *  @note The returned struct is allocated and freed by GLFW.  You should not
;;  *  free it yourself.
;;  *
;;  *  @sa glfwGetVideoModes
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetVideoMode [GLFWvidmode*,GLFWmonitor*]*)

;; /*! @brief Generates a gamma ramp and sets it for the specified monitor.
;;  *
;;  *  This function generates a 256-element gamma ramp from the specified exponent
;;  *  and then calls @ref glfwSetGammaRamp with it.
;;  *
;;  *  @param[in] monitor The monitor whose gamma ramp to set.
;;  *  @param[in] gamma The desired exponent.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwSetGamma [void,GLFWmonitor*,float]*)

;; /*! @brief Retrieves the current gamma ramp for the specified monitor.
;;  *
;;  *  This function retrieves the current gamma ramp of the specified monitor.
;;  *
;;  *  @param[in] monitor The monitor to query.
;;  *  @return The current gamma ramp, or `NULL` if an error occurred.
;;  *
;;  *  @note The value arrays of the returned ramp are allocated and freed by GLFW.
;;  *  You should not free them yourself.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwGetGammaRamp [GLFWgammaramp*,GLFWmonitor*]*)

;; /*! @brief Sets the current gamma ramp for the specified monitor.
;;  *
;;  *  This function sets the current gamma ramp for the specified monitor.
;;  *
;;  *  @param[in] monitor The monitor whose gamma ramp to set.
;;  *  @param[in] ramp The gamma ramp to use.
;;  *
;;  *  @note Gamma ramp sizes other than 256 are not supported by all hardware.
;;  *
;;  *  @ingroup monitor
;;  */
(bind-lib libglfw3 glfwSetGammaRamp [void,GLFWmonitor*,GLFWgammaramp*]*)

;; /*! @brief Resets all window hints to their default values.
;;  *
;;  *  This function resets all window hints to their
;;  *  [default values](@ref window_hints_values).
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @sa glfwWindowHint
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwDefaultWindowHints [void]*)

;; /*! @brief Sets the specified window hint to the desired value.
;;  *
;;  *  This function sets hints for the next call to @ref glfwCreateWindow.  The
;;  *  hints, once set, retain their values until changed by a call to @ref
;;  *  glfwWindowHint or @ref glfwDefaultWindowHints, or until the library is
;;  *  terminated with @ref glfwTerminate.
;;  *
;;  *  @param[in] target The [window hint](@ref window_hints) to set.
;;  *  @param[in] hint The new value of the window hint.
;;  *
;;  *  @par New in GLFW 3
;;  *  Hints are no longer reset to their default values on window creation.  To
;;  *  set default hint values, use @ref glfwDefaultWindowHints.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @sa glfwDefaultWindowHints
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwWindowHint [void,i32,i32]*)

;; /*! @brief Creates a window and its associated context.
;;  *
;;  *  This function creates a window and its associated context.  Most of the
;;  *  options controlling how the window and its context should be created are
;;  *  specified through @ref glfwWindowHint.
;;  *
;;  *  Successful creation does not change which context is current.  Before you
;;  *  can use the newly created context, you need to make it current using @ref
;;  *  glfwMakeContextCurrent.
;;  *
;;  *  Note that the created window and context may differ from what you requested,
;;  *  as not all parameters and hints are
;;  *  [hard constraints](@ref window_hints_hard).  This includes the size of the
;;  *  window, especially for full screen windows.  To retrieve the actual
;;  *  attributes of the created window and context, use queries like @ref
;;  *  glfwGetWindowAttrib and @ref glfwGetWindowSize.
;;  *
;;  *  To create a full screen window, you need to specify the monitor to use.  If
;;  *  no monitor is specified, windowed mode will be used.  Unless you have a way
;;  *  for the user to choose a specific monitor, it is recommended that you pick
;;  *  the primary monitor.  For more information on how to retrieve monitors, see
;;  *  @ref monitor_monitors.
;;  *
;;  *  To create the window at a specific position, make it initially invisible
;;  *  using the `GLFW_VISIBLE` window hint, set its position and then show it.
;;  *
;;  *  If a full screen window is active, the screensaver is prohibited from
;;  *  starting.
;;  *
;;  *  @param[in] width The desired width, in screen coordinates, of the window.
;;  *  This must be greater than zero.
;;  *  @param[in] height The desired height, in screen coordinates, of the window.
;;  *  This must be greater than zero.
;;  *  @param[in] title The initial, UTF-8 encoded window title.
;;  *  @param[in] monitor The monitor to use for full screen mode, or `NULL` to use
;;  *  windowed mode.
;;  *  @param[in] share The window whose context to share resources with, or `NULL`
;;  *  to not share resources.
;;  *  @return The handle of the created window, or `NULL` if an error occurred.
;;  *
;;  *  @remarks **Windows:** Window creation will fail if the Microsoft GDI
;;  *  software OpenGL implementation is the only one available.
;;  *
;;  *  @remarks **Windows:** If the executable has an icon resource named
;;  *  `GLFW_ICON,` it will be set as the icon for the window.  If no such icon is
;;  *  present, the `IDI_WINLOGO` icon will be used instead.
;;  *
;;  *  @remarks **OS X:** The GLFW window has no icon, as it is not a document
;;  *  window, but the dock icon will be the same as the application bundle's icon.
;;  *  Also, the first time a window is opened the menu bar is populated with
;;  *  common commands like Hide, Quit and About.  The (minimal) about dialog uses
;;  *  information from the application's bundle.  For more information on bundles,
;;  *  see the Bundle Programming Guide provided by Apple.
;;  *
;;  *  @remarks **X11:** There is no mechanism for setting the window icon yet.
;;  *
;;  *  @remarks The swap interval is not set during window creation, but is left at
;;  *  the default value for that platform.  For more information, see @ref
;;  *  glfwSwapInterval.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @sa glfwDestroyWindow
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwCreateWindow [GLFWwindow*,i32,i32,i8*,GLFWmonitor*,GLFWwindow*]*)

;; /*! @brief Destroys the specified window and its context.
;;  *
;;  *  This function destroys the specified window and its context.  On calling
;;  *  this function, no further callbacks will be called for that window.
;;  *
;;  *  @param[in] window The window to destroy.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @note This function may not be called from a callback.
;;  *
;;  *  @note If the window's context is current on the main thread, it is
;;  *  detached before being destroyed.
;;  *
;;  *  @warning The window's context must not be current on any other thread.
;;  *
;;  *  @sa glfwCreateWindow
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwDestroyWindow [void,GLFWwindow*]*)

;; /*! @brief Checks the close flag of the specified window.
;;  *
;;  *  This function returns the value of the close flag of the specified window.
;;  *
;;  *  @param[in] window The window to query.
;;  *  @return The value of the close flag.
;;  *
;;  *  @remarks This function may be called from secondary threads.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwWindowShouldClose [i32,GLFWwindow*]*)

;; /*! @brief Sets the close flag of the specified window.
;;  *
;;  *  This function sets the value of the close flag of the specified window.
;;  *  This can be used to override the user's attempt to close the window, or
;;  *  to signal that it should be closed.
;;  *
;;  *  @param[in] window The window whose flag to change.
;;  *  @param[in] value The new value.
;;  *
;;  *  @remarks This function may be called from secondary threads.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowShouldClose [void,GLFWwindow*,i32]*)

;; /*! @brief Sets the title of the specified window.
;;  *
;;  *  This function sets the window title, encoded as UTF-8, of the specified
;;  *  window.
;;  *
;;  *  @param[in] window The window whose title to change.
;;  *  @param[in] title The UTF-8 encoded window title.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowTitle [void,GLFWwindow*,i8*]*)

;; /*! @brief Retrieves the position of the client area of the specified window.
;;  *
;;  *  This function retrieves the position, in screen coordinates, of the
;;  *  upper-left corner of the client area of the specified window.
;;  *
;;  *  @param[in] window The window to query.
;;  *  @param[out] xpos Where to store the x-coordinate of the upper-left corner of
;;  *  the client area, or `NULL`.
;;  *  @param[out] ypos Where to store the y-coordinate of the upper-left corner of
;;  *  the client area, or `NULL`.
;;  *
;;  *  @sa glfwSetWindowPos
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwGetWindowPos [void,GLFWwindow*,i32*,i32*]*)

;; /*! @brief Sets the position of the client area of the specified window.
;;  *
;;  *  This function sets the position, in screen coordinates, of the upper-left
;;  *  corner of the client area of the window.
;;  *
;;  *  If the specified window is a full screen window, this function does nothing.
;;  *
;;  *  If you wish to set an initial window position you should create a hidden
;;  *  window (using @ref glfwWindowHint and `GLFW_VISIBLE`), set its position and
;;  *  then show it.
;;  *
;;  *  @param[in] window The window to query.
;;  *  @param[in] xpos The x-coordinate of the upper-left corner of the client area.
;;  *  @param[in] ypos The y-coordinate of the upper-left corner of the client area.
;;  *
;;  *  @note It is very rarely a good idea to move an already visible window, as it
;;  *  will confuse and annoy the user.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @note The window manager may put limits on what positions are allowed.
;;  *
;;  *  @sa glfwGetWindowPos
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowPos [void,GLFWwindow*,i32,i32]*)

;; /*! @brief Retrieves the size of the client area of the specified window.
;;  *
;;  *  This function retrieves the size, in screen coordinates, of the client area
;;  *  of the specified window.  If you wish to retrieve the size of the
;;  *  framebuffer in pixels, see @ref glfwGetFramebufferSize.
;;  *
;;  *  @param[in] window The window whose size to retrieve.
;;  *  @param[out] width Where to store the width, in screen coordinates, of the
;;  *  client area, or `NULL`.
;;  *  @param[out] height Where to store the height, in screen coordinates, of the
;;  *  client area, or `NULL`.
;;  *
;;  *  @sa glfwSetWindowSize
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwGetWindowSize [void,GLFWwindow*,i32*,i32*]*)

;; /*! @brief Sets the size of the client area of the specified window.
;;  *
;;  *  This function sets the size, in screen coordinates, of the client area of
;;  *  the specified window.
;;  *
;;  *  For full screen windows, this function selects and switches to the resolution
;;  *  closest to the specified size, without affecting the window's context.  As
;;  *  the context is unaffected, the bit depths of the framebuffer remain
;;  *  unchanged.
;;  *
;;  *  @param[in] window The window to resize.
;;  *  @param[in] width The desired width of the specified window.
;;  *  @param[in] height The desired height of the specified window.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @note The window manager may put limits on what window sizes are allowed.
;;  *
;;  *  @sa glfwGetWindowSize
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowSize [void,GLFWwindow*,i32,i32]*)

;; /*! @brief Retrieves the size of the framebuffer of the specified window.
;;  *
;;  *  This function retrieves the size, in pixels, of the framebuffer of the
;;  *  specified window.  If you wish to retrieve the size of the window in screen
;;  *  coordinates, see @ref glfwGetWindowSize.
;;  *
;;  *  @param[in] window The window whose framebuffer to query.
;;  *  @param[out] width Where to store the width, in pixels, of the framebuffer,
;;  *  or `NULL`.
;;  *  @param[out] height Where to store the height, in pixels, of the framebuffer,
;;  *  or `NULL`.
;;  *
;;  *  @sa glfwSetFramebufferSizeCallback
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwGetFramebufferSize [void,GLFWwindow*,i32*,i32*]*)

;; /*! @brief Iconifies the specified window.
;;  *
;;  *  This function iconifies/minimizes the specified window, if it was previously
;;  *  restored.  If it is a full screen window, the original monitor resolution is
;;  *  restored until the window is restored.  If the window is already iconified,
;;  *  this function does nothing.
;;  *
;;  *  @param[in] window The window to iconify.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @sa glfwRestoreWindow
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwIconifyWindow [void,GLFWwindow*]*)

;; /*! @brief Restores the specified window.
;;  *
;;  *  This function restores the specified window, if it was previously
;;  *  iconified/minimized.  If it is a full screen window, the resolution chosen
;;  *  for the window is restored on the selected monitor.  If the window is
;;  *  already restored, this function does nothing.
;;  *
;;  *  @param[in] window The window to restore.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @sa glfwIconifyWindow
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwRestoreWindow [void,GLFWwindow*]*)

;; /*! @brief Makes the specified window visible.
;;  *
;;  *  This function makes the specified window visible, if it was previously
;;  *  hidden.  If the window is already visible or is in full screen mode, this
;;  *  function does nothing.
;;  *
;;  *  @param[in] window The window to make visible.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @sa glfwHideWindow
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwShowWindow [void,GLFWwindow*]*)

;; /*! @brief Hides the specified window.
;;  *
;;  *  This function hides the specified window, if it was previously visible.  If
;;  *  the window is already hidden or is in full screen mode, this function does
;;  *  nothing.
;;  *
;;  *  @param[in] window The window to hide.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @sa glfwShowWindow
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwHideWindow [void,GLFWwindow*]*)

;; /*! @brief Returns the monitor that the window uses for full screen mode.
;;  *
;;  *  This function returns the handle of the monitor that the specified window is
;;  *  in full screen on.
;;  *
;;  *  @param[in] window The window to query.
;;  *  @return The monitor, or `NULL` if the window is in windowed mode.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwGetWindowMonitor [GLFWmonitor*,GLFWwindow*]*)

;; /*! @brief Returns an attribute of the specified window.
;;  *
;;  *  This function returns an attribute of the specified window.  There are many
;;  *  attributes, some related to the window and others to its context.
;;  *
;;  *  @param[in] window The window to query.
;;  *  @param[in] attrib The [window attribute](@ref window_attribs) whose value to
;;  *  return.
;;  *  @return The value of the attribute, or zero if an error occurred.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwGetWindowAttrib [i32,GLFWwindow*,i32]*)

;; /*! @brief Sets the user pointer of the specified window.
;;  *
;;  *  This function sets the user-defined pointer of the specified window.  The
;;  *  current value is retained until the window is destroyed.  The initial value
;;  *  is `NULL`.
;;  *
;;  *  @param[in] window The window whose pointer to set.
;;  *  @param[in] pointer The new value.
;;  *
;;  *  @sa glfwGetWindowUserPointer
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowUserPointer [void,GLFWwindow*,i8*]*)

;; /*! @brief Returns the user pointer of the specified window.
;;  *
;;  *  This function returns the current value of the user-defined pointer of the
;;  *  specified window.  The initial value is `NULL`.
;;  *
;;  *  @param[in] window The window whose pointer to return.
;;  *
;;  *  @sa glfwSetWindowUserPointer
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwGetWindowUserPointer [void*,GLFWwindow*]*)

;; /*! @brief Sets the position callback for the specified window.
;;  *
;;  *  This function sets the position callback of the specified window, which is
;;  *  called when the window is moved.  The callback is provided with the screen
;;  *  position of the upper-left corner of the client area of the window.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowPosCallback [GLFWwindowposfun,GLFWwindow*,GLFWwindowposfun]*)

;; /*! @brief Sets the size callback for the specified window.
;;  *
;;  *  This function sets the size callback of the specified window, which is
;;  *  called when the window is resized.  The callback is provided with the size,
;;  *  in screen coordinates, of the client area of the window.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowSizeCallback [GLFWwindowsizefun,GLFWwindow*,GLFWwindowsizefun]*)

;; /*! @brief Sets the close callback for the specified window.
;;  *
;;  *  This function sets the close callback of the specified window, which is
;;  *  called when the user attempts to close the window, for example by clicking
;;  *  the close widget in the title bar.
;;  *
;;  *  The close flag is set before this callback is called, but you can modify it
;;  *  at any time with @ref glfwSetWindowShouldClose.
;;  *
;;  *  The close callback is not triggered by @ref glfwDestroyWindow.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @par New in GLFW 3
;;  *  The close callback no longer returns a value.
;;  *
;;  *  @remarks **OS X:** Selecting Quit from the application menu will
;;  *  trigger the close callback for all windows.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowCloseCallback [GLFWwindowclosefun,GLFWwindow*,GLFWwindowclosefun]*)

;; /*! @brief Sets the refresh callback for the specified window.
;;  *
;;  *  This function sets the refresh callback of the specified window, which is
;;  *  called when the client area of the window needs to be redrawn, for example
;;  *  if the window has been exposed after having been covered by another window.
;;  *
;;  *  On compositing window systems such as Aero, Compiz or Aqua, where the window
;;  *  contents are saved off-screen, this callback may be called only very
;;  *  infrequently or never at all.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @note On compositing window systems such as Aero, Compiz or Aqua, where the
;;  *  window contents are saved off-screen, this callback may be called only very
;;  *  infrequently or never at all.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowRefreshCallback [GLFWwindowrefreshfun,GLFWwindow*,GLFWwindowrefreshfun]*)

;; /*! @brief Sets the focus callback for the specified window.
;;  *
;;  *  This function sets the focus callback of the specified window, which is
;;  *  called when the window gains or loses focus.
;;  *
;;  *  After the focus callback is called for a window that lost focus, synthetic
;;  *  key and mouse button release events will be generated for all such that had
;;  *  been pressed.  For more information, see @ref glfwSetKeyCallback and @ref
;;  *  glfwSetMouseButtonCallback.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowFocusCallback [GLFWwindowfocusfun,GLFWwindow*,GLFWwindowfocusfun]*)

;; /*! @brief Sets the iconify callback for the specified window.
;;  *
;;  *  This function sets the iconification callback of the specified window, which
;;  *  is called when the window is iconified or restored.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetWindowIconifyCallback [GLFWwindowiconifyfun,GLFWwindow*,GLFWwindowiconifyfun]*)

;; /*! @brief Sets the framebuffer resize callback for the specified window.
;;  *
;;  *  This function sets the framebuffer resize callback of the specified window,
;;  *  which is called when the framebuffer of the specified window is resized.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwSetFramebufferSizeCallback [GLFWframebuffersizefun,GLFWwindow*,GLFWframebuffersizefun]*)

;; /*! @brief Processes all pending events.
;;  *
;;  *  This function processes only those events that have already been received
;;  *  and then returns immediately.  Processing events will cause the window and
;;  *  input callbacks associated with those events to be called.
;;  *
;;  *  This function is not required for joystick input to work.
;;  *
;;  *  @par New in GLFW 3
;;  *  This function is no longer called by @ref glfwSwapBuffers.  You need to call
;;  *  it or @ref glfwWaitEvents yourself.
;;  *
;;  *  @remarks On some platforms, a window move, resize or menu operation will
;;  *  cause event processing to block.  This is due to how event processing is
;;  *  designed on those platforms.  You can use the
;;  *  [window refresh callback](@ref GLFWwindowrefreshfun) to redraw the contents
;;  *  of your window when necessary during the operation.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @note This function may not be called from a callback.
;;  *
;;  *  @note On some platforms, certain callbacks may be called outside of a call
;;  *  to one of the event processing functions.
;;  *
;;  *  @sa glfwWaitEvents
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwPollEvents [void]*)

;; /*! @brief Waits until events are pending and processes them.
;;  *
;;  *  This function puts the calling thread to sleep until at least one event has
;;  *  been received.  Once one or more events have been received, it behaves as if
;;  *  @ref glfwPollEvents was called, i.e. the events are processed and the
;;  *  function then returns immediately.  Processing events will cause the window
;;  *  and input callbacks associated with those events to be called.
;;  *
;;  *  Since not all events are associated with callbacks, this function may return
;;  *  without a callback having been called even if you are monitoring all
;;  *  callbacks.
;;  *
;;  *  This function is not required for joystick input to work.
;;  *
;;  *  @remarks On some platforms, a window move, resize or menu operation will
;;  *  cause event processing to block.  This is due to how event processing is
;;  *  designed on those platforms.  You can use the
;;  *  [window refresh callback](@ref GLFWwindowrefreshfun) to redraw the contents
;;  *  of your window when necessary during the operation.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @note This function may not be called from a callback.
;;  *
;;  *  @note On some platforms, certain callbacks may be called outside of a call
;;  *  to one of the event processing functions.
;;  *
;;  *  @sa glfwPollEvents
;;  *
;;  *  @ingroup window
;;  */
(bind-lib libglfw3 glfwWaitEvents [void]*)

;; /*! @brief Returns the value of an input option for the specified window.
;;  *
;;  *  @param[in] window The window to query.
;;  *  @param[in] mode One of `GLFW_CURSOR`, `GLFW_STICKY_KEYS` or
;;  *  `GLFW_STICKY_MOUSE_BUTTONS`.
;;  *
;;  *  @sa glfwSetInputMode
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetInputMode [i32,GLFWwindow*,i32]*)

;; /*! @brief Sets an input option for the specified window.
;;  *  @param[in] window The window whose input mode to set.
;;  *  @param[in] mode One of `GLFW_CURSOR`, `GLFW_STICKY_KEYS` or
;;  *  `GLFW_STICKY_MOUSE_BUTTONS`.
;;  *  @param[in] value The new value of the specified input mode.
;;  *
;;  *  If `mode` is `GLFW_CURSOR`, the value must be one of the supported input
;;  *  modes:
;;  *  - `GLFW_CURSOR_NORMAL` makes the cursor visible and behaving normally.
;;  *  - `GLFW_CURSOR_HIDDEN` makes the cursor invisible when it is over the client
;;  *    area of the window but does not restrict the cursor from leaving.  This is
;;  *    useful if you wish to render your own cursor or have no visible cursor at
;;  *    all.
;;  *  - `GLFW_CURSOR_DISABLED` hides and grabs the cursor, providing virtual
;;  *    and unlimited cursor movement.  This is useful for implementing for
;;  *    example 3D camera controls.
;;  *
;;  *  If `mode` is `GLFW_STICKY_KEYS`, the value must be either `GL_TRUE` to
;;  *  enable sticky keys, or `GL_FALSE` to disable it.  If sticky keys are
;;  *  enabled, a key press will ensure that @ref glfwGetKey returns @ref
;;  *  GLFW_PRESS the next time it is called even if the key had been released
;;  *  before the call.  This is useful when you are only interested in whether
;;  *  keys have been pressed but not when or in which order.
;;  *
;;  *  If `mode` is `GLFW_STICKY_MOUSE_BUTTONS`, the value must be either `GL_TRUE`
;;  *  to enable sticky mouse buttons, or `GL_FALSE` to disable it.  If sticky
;;  *  mouse buttons are enabled, a mouse button press will ensure that @ref
;;  *  glfwGetMouseButton returns @ref GLFW_PRESS the next time it is called even
;;  *  if the mouse button had been released before the call.  This is useful when
;;  *  you are only interested in whether mouse buttons have been pressed but not
;;  *  when or in which order.
;;  *
;;  *  @sa glfwGetInputMode
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetInputMode [void,GLFWwindow*,i32,i32]*)

;; /*! @brief Returns the last reported state of a keyboard key for the specified
;;  *  window.
;;  *
;;  *  This function returns the last state reported for the specified key to the
;;  *  specified window.  The returned state is one of `GLFW_PRESS` or
;;  *  `GLFW_RELEASE`.  The higher-level state `GLFW_REPEAT` is only reported to
;;  *  the key callback.
;;  *
;;  *  If the `GLFW_STICKY_KEYS` input mode is enabled, this function returns
;;  *  `GLFW_PRESS` the first time you call this function after a key has been
;;  *  pressed, even if the key has already been released.
;;  *
;;  *  The key functions deal with physical keys, with [key tokens](@ref keys)
;;  *  named after their use on the standard US keyboard layout.  If you want to
;;  *  input text, use the Unicode character callback instead.
;;  *
;;  *  @param[in] window The desired window.
;;  *  @param[in] key The desired [keyboard key](@ref keys).
;;  *  @return One of `GLFW_PRESS` or `GLFW_RELEASE`.
;;  *
;;  *  @note `GLFW_KEY_UNKNOWN` is not a valid key for this function.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetKey [i32,GLFWwindow*,i32]*)

;; /*! @brief Returns the last reported state of a mouse button for the specified
;;  *  window.
;;  *
;;  *  This function returns the last state reported for the specified mouse button
;;  *  to the specified window.
;;  *
;;  *  If the `GLFW_STICKY_MOUSE_BUTTONS` input mode is enabled, this function
;;  *  returns `GLFW_PRESS` the first time you call this function after a mouse
;;  *  button has been pressed, even if the mouse button has already been released.
;;  *
;;  *  @param[in] window The desired window.
;;  *  @param[in] button The desired [mouse button](@ref buttons).
;;  *  @return One of `GLFW_PRESS` or `GLFW_RELEASE`.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetMouseButton [i32,GLFWwindow*,i32]*)

;; /*! @brief Retrieves the last reported cursor position, relative to the client
;;  *  area of the window.
;;  *
;;  *  This function returns the last reported position of the cursor, in screen
;;  *  coordinates, relative to the upper-left corner of the client area of the
;;  *  specified window.
;;  *
;;  *  If the cursor is disabled (with `GLFW_CURSOR_DISABLED`) then the cursor
;;  *  position is unbounded and limited only by the minimum and maximum values of
;;  *  a `double`.
;;  *
;;  *  The coordinate can be converted to their integer equivalents with the
;;  *  `floor` function.  Casting directly to an integer type works for positive
;;  *  coordinates, but fails for negative ones.
;;  *
;;  *  @param[in] window The desired window.
;;  *  @param[out] xpos Where to store the cursor x-coordinate, relative to the
;;  *  left edge of the client area, or `NULL`.
;;  *  @param[out] ypos Where to store the cursor y-coordinate, relative to the to
;;  *  top edge of the client area, or `NULL`.
;;  *
;;  *  @sa glfwSetCursorPos
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetCursorPos [void,GLFWwindow*,double*,double*]*)

;; /*! @brief Sets the position of the cursor, relative to the client area of the
;;  *  window.
;;  *
;;  *  This function sets the position, in screen coordinates, of the cursor
;;  *  relative to the upper-left corner of the client area of the specified
;;  *  window.  The window must be focused.  If the window does not have focus when
;;  *  this function is called, it fails silently.
;;  *
;;  *  If the cursor is disabled (with `GLFW_CURSOR_DISABLED`) then the cursor
;;  *  position is unbounded and limited only by the minimum and maximum values of
;;  *  a `double`.
;;  *
;;  *  @param[in] window The desired window.
;;  *  @param[in] xpos The desired x-coordinate, relative to the left edge of the
;;  *  client area.
;;  *  @param[in] ypos The desired y-coordinate, relative to the top edge of the
;;  *  client area.
;;  *
;;  *  @sa glfwGetCursorPos
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetCursorPos [void,GLFWwindow*,double,double]*)

;; /*! @brief Sets the key callback.
;;  *
;;  *  This function sets the key callback of the specific window, which is called
;;  *  when a key is pressed, repeated or released.
;;  *
;;  *  The key functions deal with physical keys, with layout independent
;;  *  [key tokens](@ref keys) named after their values in the standard US keyboard
;;  *  layout.  If you want to input text, use the
;;  *  [character callback](@ref glfwSetCharCallback) instead.
;;  *
;;  *  When a window loses focus, it will generate synthetic key release events
;;  *  for all pressed keys.  You can tell these events from user-generated events
;;  *  by the fact that the synthetic ones are generated after the window has lost
;;  *  focus, i.e. `GLFW_FOCUSED` will be false and the focus callback will have
;;  *  already been called.
;;  *
;;  *  The scancode of a key is specific to that platform or sometimes even to that
;;  *  machine.  Scancodes are intended to allow users to bind keys that don't have
;;  *  a GLFW key token.  Such keys have `key` set to `GLFW_KEY_UNKNOWN`, their
;;  *  state is not saved and so it cannot be retrieved with @ref glfwGetKey.
;;  *
;;  *  Sometimes GLFW needs to generate synthetic key events, in which case the
;;  *  scancode may be zero.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new key callback, or `NULL` to remove the currently
;;  *  set callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetKeyCallback [GLFWkeyfun,GLFWwindow*,GLFWkeyfun]*)

;; /*! @brief Sets the Unicode character callback.
;;  *
;;  *  This function sets the character callback of the specific window, which is
;;  *  called when a Unicode character is input.
;;  *
;;  *  The character callback is intended for text input.  If you want to know
;;  *  whether a specific key was pressed or released, use the
;;  *  [key callback](@ref glfwSetKeyCallback) instead.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetCharCallback [GLFWcharfun,GLFWwindow*,GLFWcharfun]*)

;; /*! @brief Sets the mouse button callback.
;;  *
;;  *  This function sets the mouse button callback of the specified window, which
;;  *  is called when a mouse button is pressed or released.
;;  *
;;  *  When a window loses focus, it will generate synthetic mouse button release
;;  *  events for all pressed mouse buttons.  You can tell these events from
;;  *  user-generated events by the fact that the synthetic ones are generated
;;  *  after the window has lost focus, i.e. `GLFW_FOCUSED` will be false and the
;;  *  focus callback will have already been called.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetMouseButtonCallback [GLFWmousebuttonfun,GLFWwindow*,GLFWmousebuttonfun]*)

;; /*! @brief Sets the cursor position callback.
;;  *
;;  *  This function sets the cursor position callback of the specified window,
;;  *  which is called when the cursor is moved.  The callback is provided with the
;;  *  position, in screen coordinates, relative to the upper-left corner of the
;;  *  client area of the window.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetCursorPosCallback [GLFWcursorposfun,GLFWwindow*,GLFWcursorposfun]*)

;; /*! @brief Sets the cursor enter/exit callback.
;;  *
;;  *  This function sets the cursor boundary crossing callback of the specified
;;  *  window, which is called when the cursor enters or leaves the client area of
;;  *  the window.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new callback, or `NULL` to remove the currently set
;;  *  callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetCursorEnterCallback [GLFWcursorenterfun,GLFWwindow*,GLFWcursorenterfun]*)

;; /*! @brief Sets the scroll callback.
;;  *
;;  *  This function sets the scroll callback of the specified window, which is
;;  *  called when a scrolling device is used, such as a mouse wheel or scrolling
;;  *  area of a touchpad.
;;  *
;;  *  The scroll callback receives all scrolling input, like that from a mouse
;;  *  wheel or a touchpad scrolling area.
;;  *
;;  *  @param[in] window The window whose callback to set.
;;  *  @param[in] cbfun The new scroll callback, or `NULL` to remove the currently
;;  *  set callback.
;;  *  @return The previously set callback, or `NULL` if no callback was set or an
;;  *  error occurred.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwSetScrollCallback [GLFWscrollfun,GLFWwindow*,GLFWscrollfun]*)

;; /*! @brief Returns whether the specified joystick is present.
;;  *
;;  *  This function returns whether the specified joystick is present.
;;  *
;;  *  @param[in] joy The joystick to query.
;;  *  @return `GL_TRUE` if the joystick is present, or `GL_FALSE` otherwise.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwJoystickPresent [i32,i32]*)

;; /*! @brief Returns the values of all axes of the specified joystick.
;;  *
;;  *  This function returns the values of all axes of the specified joystick.
;;  *
;;  *  @param[in] joy The joystick to query.
;;  *  @param[out] count Where to store the size of the returned array.  This is
;;  *  set to zero if an error occurred.
;;  *  @return An array of axis values, or `NULL` if the joystick is not present.
;;  *
;;  *  @note The returned array is allocated and freed by GLFW.  You should not
;;  *  free it yourself.
;;  *
;;  *  @note The returned array is valid only until the next call to @ref
;;  *  glfwGetJoystickAxes for that joystick.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetJoystickAxes [float*,i32,i32*]*)

;; /*! @brief Returns the state of all buttons of the specified joystick.
;;  *
;;  *  This function returns the state of all buttons of the specified joystick.
;;  *
;;  *  @param[in] joy The joystick to query.
;;  *  @param[out] count Where to store the size of the returned array.  This is
;;  *  set to zero if an error occurred.
;;  *  @return An array of button states, or `NULL` if the joystick is not present.
;;  *
;;  *  @note The returned array is allocated and freed by GLFW.  You should not
;;  *  free it yourself.
;;  *
;;  *  @note The returned array is valid only until the next call to @ref
;;  *  glfwGetJoystickButtons for that joystick.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetJoystickButtons [i8*,i32,i32*]*)

;; /*! @brief Returns the name of the specified joystick.
;;  *
;;  *  This function returns the name, encoded as UTF-8, of the specified joystick.
;;  *
;;  *  @param[in] joy The joystick to query.
;;  *  @return The UTF-8 encoded name of the joystick, or `NULL` if the joystick
;;  *  is not present.
;;  *
;;  *  @note The returned string is allocated and freed by GLFW.  You should not
;;  *  free it yourself.
;;  *
;;  *  @note The returned string is valid only until the next call to @ref
;;  *  glfwGetJoystickName for that joystick.
;;  *
;;  *  @ingroup input
;;  */
(bind-lib libglfw3 glfwGetJoystickName [i8*,i32]*)

;; /*! @brief Sets the clipboard to the specified string.
;;  *
;;  *  This function sets the system clipboard to the specified, UTF-8 encoded
;;  *  string.  The string is copied before returning, so you don't have to retain
;;  *  it afterwards.
;;  *
;;  *  @param[in] window The window that will own the clipboard contents.
;;  *  @param[in] string A UTF-8 encoded string.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @sa glfwGetClipboardString
;;  *
;;  *  @ingroup clipboard
;;  */
(bind-lib libglfw3 glfwSetClipboardString [void,GLFWwindow*,i8*]*)

;; /*! @brief Retrieves the contents of the clipboard as a string.
;;  *
;;  *  This function returns the contents of the system clipboard, if it contains
;;  *  or is convertible to a UTF-8 encoded string.
;;  *
;;  *  @param[in] window The window that will request the clipboard contents.
;;  *  @return The contents of the clipboard as a UTF-8 encoded string, or `NULL`
;;  *  if an error occurred.
;;  *
;;  *  @note This function may only be called from the main thread.
;;  *
;;  *  @note The returned string is allocated and freed by GLFW.  You should not
;;  *  free it yourself.
;;  *
;;  *  @note The returned string is valid only until the next call to @ref
;;  *  glfwGetClipboardString or @ref glfwSetClipboardString.
;;  *
;;  *  @sa glfwSetClipboardString
;;  *
;;  *  @ingroup clipboard
;;  */
(bind-lib libglfw3 glfwGetClipboardString [i8*,GLFWwindow*]*)

;; /*! @brief Returns the value of the GLFW timer.
;;  *
;;  *  This function returns the value of the GLFW timer.  Unless the timer has
;;  *  been set using @ref glfwSetTime, the timer measures time elapsed since GLFW
;;  *  was initialized.
;;  *
;;  *  @return The current value, in seconds, or zero if an error occurred.
;;  *
;;  *  @remarks This function may be called from secondary threads.
;;  *
;;  *  @note The resolution of the timer is system dependent, but is usually on the
;;  *  order of a few micro- or nanoseconds.  It uses the highest-resolution
;;  *  monotonic time source on each supported platform.
;;  *
;;  *  @ingroup time
;;  */
(bind-lib libglfw3 glfwGetTime [double]*)

;; /*! @brief Sets the GLFW timer.
;;  *
;;  *  This function sets the value of the GLFW timer.  It then continues to count
;;  *  up from that value.
;;  *
;;  *  @param[in] time The new value, in seconds.
;;  *
;;  *  @note The resolution of the timer is system dependent, but is usually on the
;;  *  order of a few micro- or nanoseconds.  It uses the highest-resolution
;;  *  monotonic time source on each supported platform.
;;  *
;;  *  @ingroup time
;;  */
(bind-lib libglfw3 glfwSetTime [void,double]*)

;; /*! @brief Makes the context of the specified window current for the calling
;;  *  thread.
;;  *
;;  *  This function makes the context of the specified window current on the
;;  *  calling thread.  A context can only be made current on a single thread at
;;  *  a time and each thread can have only a single current context at a time.
;;  *
;;  *  @param[in] window The window whose context to make current, or `NULL` to
;;  *  detach the current context.
;;  *
;;  *  @remarks This function may be called from secondary threads.
;;  *
;;  *  @sa glfwGetCurrentContext
;;  *
;;  *  @ingroup context
;;  */
(bind-lib libglfw3 glfwMakeContextCurrent [void,GLFWwindow*]*)

;; /*! @brief Returns the window whose context is current on the calling thread.
;;  *
;;  *  This function returns the window whose context is current on the calling
;;  *  thread.
;;  *
;;  *  @return The window whose context is current, or `NULL` if no window's
;;  *  context is current.
;;  *
;;  *  @remarks This function may be called from secondary threads.
;;  *
;;  *  @sa glfwMakeContextCurrent
;;  *
;;  *  @ingroup context
;;  */
(bind-lib libglfw3 glfwGetCurrentContext [GLFWwindow*]*)

;; /*! @brief Swaps the front and back buffers of the specified window.
;;  *
;;  *  This function swaps the front and back buffers of the specified window.  If
;;  *  the swap interval is greater than zero, the GPU driver waits the specified
;;  *  number of screen updates before swapping the buffers.
;;  *
;;  *  @param[in] window The window whose buffers to swap.
;;  *
;;  *  @remarks This function may be called from secondary threads.
;;  *
;;  *  @par New in GLFW 3
;;  *  This function no longer calls @ref glfwPollEvents.  You need to call it or
;;  *  @ref glfwWaitEvents yourself.
;;  *
;;  *  @sa glfwSwapInterval
;;  *
;;  *  @ingroup context
;;  */
(bind-lib libglfw3 glfwSwapBuffers [void,GLFWwindow*]*)

;; /*! @brief Sets the swap interval for the current context.
;;  *
;;  *  This function sets the swap interval for the current context, i.e. the
;;  *  number of screen updates to wait before swapping the buffers of a window and
;;  *  returning from @ref glfwSwapBuffers.  This is sometimes called 'vertical
;;  *  synchronization', 'vertical retrace synchronization' or 'vsync'.
;;  *
;;  *  Contexts that support either of the `WGL_EXT_swap_control_tear` and
;;  *  `GLX_EXT_swap_control_tear` extensions also accept negative swap intervals,
;;  *  which allow the driver to swap even if a frame arrives a little bit late.
;;  *  You can check for the presence of these extensions using @ref
;;  *  glfwExtensionSupported.  For more information about swap tearing, see the
;;  *  extension specifications.
;;  *
;;  *  @param[in] interval The minimum number of screen updates to wait for
;;  *  until the buffers are swapped by @ref glfwSwapBuffers.
;;  *
;;  *  @remarks This function may be called from secondary threads.
;;  *
;;  *  @note This function is not called during window creation, leaving the swap
;;  *  interval set to whatever is the default on that platform.  This is done
;;  *  because some swap interval extensions used by GLFW do not allow the swap
;;  *  interval to be reset to zero once it has been set to a non-zero value.
;;  *
;;  *  @note Some GPU drivers do not honor the requested swap interval, either
;;  *  because of user settings that override the request or due to bugs in the
;;  *  driver.
;;  *
;;  *  @sa glfwSwapBuffers
;;  *
;;  *  @ingroup context
;;  */
(bind-lib libglfw3 glfwSwapInterval [void,i32]*)

;; /*! @brief Returns whether the specified extension is available.
;;  *
;;  *  This function returns whether the specified
;;  *  [OpenGL or context creation API extension](@ref context_glext) is supported
;;  *  by the current context.  For example, on Windows both the OpenGL and WGL
;;  *  extension strings are checked.
;;  *
;;  *  @param[in] extension The ASCII encoded name of the extension.
;;  *  @return `GL_TRUE` if the extension is available, or `GL_FALSE` otherwise.
;;  *
;;  *  @remarks This function may be called from secondary threads.
;;  *
;;  *  @note As this functions searches one or more extension strings on each call,
;;  *  it is recommended that you cache its results if it's going to be used
;;  *  frequently.  The extension strings will not change during the lifetime of
;;  *  a context, so there is no danger in doing this.
;;  *
;;  *  @ingroup context
;;  */
(bind-lib libglfw3 glfwExtensionSupported [i32,i8*]*)

;; /*! @brief Returns the address of the specified function for the current
;;  *  context.
;;  *
;;  *  This function returns the address of the specified
;;  *  [client API or extension function](@ref context_glext), if it is supported
;;  *  by the current context.
;;  *
;;  *  @param[in] procname The ASCII encoded name of the function.
;;  *  @return The address of the function, or `NULL` if the function is
;;  *  unavailable.
;;  *
;;  *  @remarks This function may be called from secondary threads.
;;  *
;;  *  @note The addresses of these functions are not guaranteed to be the same for
;;  *  all contexts, especially if they use different client APIs or even different
;;  *  context creation hints.
;;  *
;;  *  @ingroup context
;;  */
(bind-lib libglfw3 glfwGetProcAddress [GLFWglproc,i8*]*)


;; xtlang helper functions

;; (bind-func glew_init
;;   (lambda (experimental_p:i8)
;;     (set! glewExperimental experimental_p)
;;     (let ((res (glewInit)))
;;       (if (= res GLEW_OK)
;;           (printf "GLEW Initialised.\n")
;;           (begin (printf "Error initialising GLEW: ")
;;                  (cond ((= res GLEW_ERROR_NO_GL_VERSION)
;;                         (printf "no GL version.\n"))
;;                        ((= res GLEW_ERROR_GL_VERSION_10_ONLY)
;;                         (printf "need at least OpenGL 1.1\n"))
;;                        ((= res GLEW_ERROR_GLX_VERSION_11_ONLY)
;;                         (printf "need at least GLX 1.2.\n"))
;;                        (else
;;                         (printf "unknown error.\n")))))
;;       res)))

(bind-func xtgl_init
  (lambda ()
    (let ((res (glfwInit)))
      (if (= res 1)
          (printf "Extempore OpenGL context initialised.\n")
          (printf "Error initialising Extempore OpenGL context.\n"))
      res)))

(bind-func xtgl_terminate
  (lambda ()
    (glfwTerminate)))

;; (bind-func xtgl_print_version_string
;;   (lambda ()
;;     (printf "%s\n" (glfwGetVersionString))))

;; window creation

(bind-func xtgl_create_window_fullscreen
  (lambda (hint_function:[void]*)
    (let ((monitor (glfwGetPrimaryMonitor))
          (vidmode (glfwGetVideoMode monitor))
          (width (tref vidmode 0))
          (height (tref vidmode 1)))
      (hint_function)
      (glfwCreateWindow width height "Extempore OpenGL Window" monitor null))))

(bind-func xtgl_create_window_fullscreen_on_screen
  (lambda (screen hint_function:[void]*)
    (let ((num_monitors:i32* (salloc))
          (monitors (glfwGetMonitors num_monitors)))
      (if (and (> screen 0)
               (< screen (pref num_monitors 0)))
          (let ((monitor (pref monitors screen))
                (vidmode (glfwGetVideoMode monitor))
                (width (tref vidmode 0))
                (height (tref vidmode 1)))
            (hint_function)
            (glfwCreateWindow width height "Extempore OpenGL Window" monitor null))
          null))))

(bind-func xtgl_create_window_with_size
  (lambda (width height hint_function:[void]*)
    (hint_function)
    (glfwCreateWindow width height "Extempore OpenGL Window" null null)))

(bind-func xtgl_set_core_profile_hints
  (lambda ()
    ;; (glfwWindowHint GLFW_CONTEXT_VERSION_MAJOR 4)
    (glfwWindowHint GLFW_CONTEXT_VERSION_MAJOR 3)
    (glfwWindowHint GLFW_CONTEXT_VERSION_MINOR 2)
    (glfwWindowHint GLFW_OPENGL_FORWARD_COMPAT GL_TRUE)
    (glfwWindowHint GLFW_OPENGL_PROFILE GLFW_OPENGL_CORE_PROFILE)
    void))

(bind-func xtgl_set_compatibility_profile_hints
  (lambda ()
    ;; (glfwWindowHint GLFW_OPENGL_PROFILE GLFW_OPENGL_COMPAT_PROFILE)
    void))

;; core profile

(bind-func xtgl_create_window_fullscreen_core
  (lambda ()
    (xtgl_create_window_fullscreen xtgl_set_core_profile_hints)))

(bind-func xtgl_create_window_fullscreen_on_screen_core
  (lambda (screen)
    (xtgl_create_window_fullscreen_on_screen
     screen xtgl_set_core_profile_hints)))

(bind-func xtgl_create_window_with_size_core
  (lambda (width height)
    (xtgl_create_window_with_size
     width height xtgl_set_core_profile_hints)))

;; compatibility profile

(bind-func xtgl_create_window_fullscreen_compat
  (lambda ()
    (xtgl_create_window_fullscreen xtgl_set_compatibility_profile_hints)))

(bind-func xtgl_create_window_fullscreen_on_screen_compat
  (lambda (screen)
    (xtgl_create_window_fullscreen_on_screen
     screen xtgl_set_compatibility_profile_hints)))

(bind-func xtgl_create_window_with_size_compat
  (lambda (width height)
    (xtgl_create_window_with_size
     width height xtgl_set_compatibility_profile_hints)))

(bind-poly xtgl_create_window_core xtgl_create_window_with_size_core)
(bind-poly xtgl_create_window_core xtgl_create_window_fullscreen_core)
(bind-poly xtgl_create_window_compat xtgl_create_window_with_size_compat)
(bind-poly xtgl_create_window_compat xtgl_create_window_fullscreen_compat)
;; 'default' to core profile
(bind-poly xtgl_create_window xtgl_create_window_with_size_core)
(bind-poly xtgl_create_window xtgl_create_window_fullscreen_core)

(bind-func xtgl_window_should_close
  (lambda (window)
    (glfwWindowShouldClose window)))

(bind-func xtgl_destroy_window
  (lambda (window)
    (if (not (null? window))
        (glfwDestroyWindow window)
        (println "Error: Window pointer is NULL."))
    void))

;; window actions

(bind-func xtgl_make_context_current
  (lambda (window)
    (glfwMakeContextCurrent window)))

(bind-func xtgl_swap_buffers
  (lambda (window:GLFWwindow*)
    (glfwSwapBuffers window)))

(bind-func xtgl_poll_events
  (lambda ()
    (glfwPollEvents)))

;; print info about windows

(bind-func xtgl_print_video_mode_details
  (lambda (vidmode:GLFWvidmode*)
    (printf "      width: %i\n     height: %i\n    redBits: %i\n  greenBits: %i\n   blueBits: %i\nrefreshRate: %i\n"
            (tref vidmode 0)
            (tref vidmode 1)
            (tref vidmode 2)
            (tref vidmode 3)
            (tref vidmode 4)
            (tref vidmode 5))))

(bind-func xtgl_print_primary_monitor_details
  (lambda ()
    (let ((monitor (glfwGetPrimaryMonitor)))
      (if (not (null? monitor))
          (xtgl_print_video_mode_details (glfwGetVideoMode monitor))
          (printf "Error: Monitor pointer is NULL.\n")))))



