;;; sndfile.xtm -- working with audio files

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs: libsndfile

;;; Commentary:

;; 

;;; Code:

;; lib-loading config
(sys:load-preload-check 'sndfile)

;; load the libsndfile dynamic library
(define libsndfile
  (let ((platform (sys:platform)))
    (cond ((string=? platform "Linux") (sys:load-dylib "libsndfile.so"))
          ((string=? platform "Windows") (sys:load-dylib "libsndfile.dll"))
          ((string=? platform "OSX") (sys:load-dylib "libsndfile.dylib"))
          (else (print "Unknown platform: " platform)))))

(if (or (eq? #f libsndfile)
        (null? libsndfile))
    (sys:load-escape "Error loading libsndfile dynamic library"))

(define *xtmlib-sndfile-loaded* #t)

(sys:load "libs/core/audio_dsp.xtm")


;; libsndfile enums
(bind-val SF_LOOP_NONE i32 800)
(bind-val SF_LOOP_FORWARD i32 801)
(bind-val SF_LOOP_BACKWARD i32 802)
(bind-val SF_LOOP_ALTERNATING i32 803)

(bind-val SFC_GET_INSTRUMENT i32 4304) ;; 0x10D0
(bind-val SFC_GET_LOOP_INFO i32 4320) ;; 0x10E0

(bind-val SFM_READ i32 #x10)
(bind-val SFM_WRITE i32 #x20)
(bind-val SFM_RDWR i32 #x30)

(bind-val SF_FORMAT_WAV i32 #x10000)
(bind-val SF_FORMAT_AIF i32 #x20000)
(bind-val SF_FORMAT_AU i32 #x30000)
(bind-val SF_FORMAT_RAW i32 #x40000)
(bind-val SF_FORMAT_VOC i32 #x80000)
(bind-val SF_FORMAT_FLAC i32 #x170000)
(bind-val SF_FORMAT_CAF i32 #x180000)
(bind-val SF_FORMAT_OGG i32 #x200000)

(bind-val SF_FORMAT_PCM_16 i32 #x2)
(bind-val SF_FORMAT_PCM_24 i32 #x3)
(bind-val SF_FORMAT_PCM_32 i32 #x4)

(bind-val SF_FORMAT_FLOAT i32 #x6)
(bind-val SF_FORMAT_DOUBLE i32 #x7)

(bind-val SF_FORMAT_VORBIS i32 #x60)

(bind-type sf_info <i64,i32,i32,i32,i32,i32>)
(bind-type sf_format_info <i32,i8*,i8*>)
;; mode,start,end,count

(bind-type _sf_loop_ <i32,i32,i32,i32>)
;; 270 bytes
;; gain,basenote,detune,velocity_lo,velocity_hi,key_lo,key_hi,loop_count,loops
(bind-type SF_INSTRUMENT <i32,i8,i8,i8,i8,i8,i8,i32,|16,_sf_loop_|>)
;; 44 bytes
;; time_sig_num time_sig_den loop_mode num_beats bpm root_key future[6]
(bind-type SF_LOOP_INFO <|2,i8|,|2,i8|,i32,i32,float,i32,|6,i32|>)
(bind-val SF_FALSE i32 0)
(bind-val SF_TRUE i32 1)

;; libsndfile functions

(bind-lib libsndfile sf_version_string [i8*]*)
(bind-lib libsndfile sf_open [i8*,i8*,i32,sf_info*]*)
(bind-lib libsndfile sf_open_fd [i8*,i32,i32,sf_info*,i32]*)
(bind-lib libsndfile sf_close [i32,i8*]*)
(bind-lib libsndfile sf_seek [i64,i8*,i64,i32]*)
(bind-lib libsndfile sf_write_sync [void,i8*]*)
;; read file by frame
(bind-lib libsndfile sf_readf_float [i64,i8*,double*,i64]*)
(bind-lib libsndfile sf_writef_float [i64,i8*,float*,i64]*)
(bind-lib libsndfile sf_readf_double [i64,i8*,double*,i64]*)
(bind-lib libsndfile sf_writef_double [i64,i8*,double*,i64]*)
;; read file by item
(bind-lib libsndfile sf_read_float [i64,i8*,float*,i64]*)
(bind-lib libsndfile sf_write_float [i64,i8*,float*,i64]*)
(bind-lib libsndfile sf_read_double [i64,i8*,double*,i64]*)
(bind-lib libsndfile sf_write_double [i64,i8*,double*,i64]*)

(bind-lib libsndfile sf_strerror [i8*,i8*]*)
(bind-lib libsndfile sf_command [i32,i8*,i32,i8*,i32]*)
(bind-lib libsndfile sf_format_check [i32,sf_info*]*)

(bind-poly sf_readf sf_readf_float)
(bind-poly sf_writef sf_writef_float)
(bind-poly sf_readf sf_readf_double)
(bind-poly sf_writef sf_writef_double)

(bind-poly sf_read sf_read_float)
(bind-poly sf_write sf_write_float)
(bind-poly sf_read sf_read_double)
(bind-poly sf_write sf_write_double)

(bind-func sf_print_version_string
  (lambda ()
    (printf "%s\n" (sf_version_string))))

(print "loaded ")
(sf_print_version_string)

;; sf_info struct accessors

(bind-func sf_frames
  (lambda (info:sf_info*)
    (tref info 0)))

(bind-func sf_set_frames
  (lambda (info:sf_info* frames)
    (tset! info 0 frames)))

(bind-func sf_samplerate
  (lambda (info:sf_info*)
    (i32toi64 (tref info 1))))

(bind-func sf_set_samplerate
  (lambda (info:sf_info* samplerate)
    (tset! info 1 (i64toi32 samplerate))))

(bind-func sf_channels
  (lambda (info:sf_info*)
    (i32toi64 (tref info 2))))

(bind-func sf_set_channels
  (lambda (info:sf_info* channels)
    (tset! info 2 (i64toi32 channels))))

(bind-func sf_format
  (lambda (info:sf_info*)
    (tref info 3)))

(bind-func sf_set_format
  (lambda (info:sf_info* format)
    (tset! info 3 format)))

(bind-func sf_sections
  (lambda (info:sf_info*)
    (i32toi64 (tref info 4))))

(bind-func sf_set_sections
  (lambda (info:sf_info* sections)
    (tset! info 4 (i64toi32 sections))))

(bind-func sf_seekable
  (lambda (info:sf_info*)
    (i32toi64 (tref info 5))))

(bind-func sf_set_seekable
  (lambda (info:sf_info* seekable)
    (tset! info 5 (i64toi32 seekable))))

;;;;;;;;;;;;;;;;;;;;;;
;; AudioBuffer type ;;
;;;;;;;;;;;;;;;;;;;;;;

;; 0 channels
;; 1 samplerate
;; 2 frames (total)
;; 3 offset           
;; 4 subframes (relates to offset)
;; 5 SAMPLE* (data)
(bind-type AudioBuffer <i64,i64,i64,i64,i64,SAMPLE*>)

;; AudioBuffer tuple accessors

(bind-func num_channels
  (lambda (abuf:AudioBuffer*)
    (tref abuf 0)))

(bind-func samplerate
  (lambda (abuf:AudioBuffer*)
    (tref abuf 1)))

(bind-func num_frames
  (lambda (abuf:AudioBuffer*)
    (tref abuf 2)))

(bind-func frame_offset
  (lambda (abuf:AudioBuffer*)
    (tref abuf 3)))

(bind-func num_subframes
  (lambda (abuf:AudioBuffer*)
    (tref abuf 4)))

(bind-func sample_data
  (lambda (abuf:AudioBuffer*)
    (tref abuf 5)))

(bind-func num_samples
  (lambda (abuf:AudioBuffer*)
    (* (num_channels abuf)
       (num_frames abuf))))

;; constructors/destructors

(bind-func create_audio_buffer
  (lambda (frames:i64 channels:i64)
    (let ((abuf:AudioBuffer* (halloc))
          (buf:SAMPLE* (halloc (* channels frames))))
      (tfill! abuf channels (convert SAMPLERATE) frames 0 frames buf)
      abuf)))

(bind-func delete_audio_buffer
  (lambda (abuf:AudioBuffer*)
    (free (tref abuf 5))
    (free abuf)
    void))

(bind-func audio_buffer_ptr
  (lambda (abuf:AudioBuffer* frame:i64 channel:i64)
    (if (and (< frame (+ (num_frames abuf) (frame_offset abuf)))
             (< channel (num_channels abuf)))
        (pref-ptr (sample_data abuf) (* frame channel)))))

;; do stuff with audio files

(bind-func print_audio_file_info
  "print info about an audio file"
  (lambda (fname)
    (let ((info:sf_info* (zalloc))
          (audiofile (sf_open fname SFM_READ info))
          (channels (sf_channels info)))
      (if (null? audiofile)
          (begin (printf "Bad audio file!\n")
                 void)
          (let ((nframes (sf_frames info))
                (file_samplerate (sf_samplerate info))
                (nseconds (/ nframes file_samplerate)))
            (printf "---------------\n")
            (printf "filename:    %s\n" fname)
            (printf "samplerate:  %d\n" file_samplerate)
            (printf "channels:    %d\n" (sf_channels info))
            (printf "format:      %#x\n" (sf_format info))
            (printf "frames:      %lld\n" nframes)
            (if (< nframes (* 44100 60 1))
                (printf "seconds:     %f\n" nseconds)
                (if (< nframes (* 44100 60 60))
                    (printf "minutes:     %f\n" (/ (convert nseconds double) 60.))
                    (printf "hours:       %f\n" (/ (convert nseconds double) (* 60. 60.)))))
            (let ((loops:SF_LOOP_INFO* (alloc))
                  (lp1 (sf_command audiofile SFC_GET_LOOP_INFO (cast loops i8*) 44)))
              (if (= lp1 SF_TRUE)
                  (printf "loop-mode:   %d - bpm(%f)\n" (tref loops 2) (ftod (tref loops 4)))
                  (printf "loop-mode:\n")))
            (let ((inst:SF_INSTRUMENT* (alloc))
                  (lp2 (sf_command audiofile SFC_GET_INSTRUMENT (cast inst i8*) 270)))
              (if (= lp2 SF_TRUE)
                  (printf "num loops:   %d\n" (tref inst 7))
                  (printf "num loops:   0\n")))
            (sf_close audiofile)
            void)))))

;; write audio data to file

(bind-func write_audio_data_to_file
  "write audio data to file"
  (lambda (fname format samplerate frames channels dat:SAMPLE*)
    (let ((info:sf_info* (zalloc)))
      (sf_set_frames info frames)
      (sf_set_samplerate info samplerate)
      (sf_set_channels info channels)
      (sf_set_format info format) 
      (let ((audiofile (sf_open fname SFM_WRITE info)))
        (if (null? audiofile)
            (begin (printf "error writing file: %s\n" (sf_strerror audiofile))
                   0)
            (let ((samples_written (sf_write audiofile dat (* channels frames))))
              ;; flush write to disk
              (sf_write_sync audiofile)
              (sf_close audiofile)
              samples_written))))))

;; write out an audio buffer
;; uses current system samplerate
(bind-func write_audio_data_to_file_default_sr
  "write audio data to file (default SR)"
  (lambda (fname format frames channels dat:SAMPLE*)
    (write_audio_data_to_file fname
                                format
                                (convert SAMPLERATE)
                                frames
                                channels
                                dat)))

;; uses systems samplerate
;; format: 16bit PCM AIFF
(bind-func write_audio_data_to_file_16bitAIFF
  "write audio data to file as 16bit PCM AIFF (default SR)"
  (lambda (fname frames channels dat:SAMPLE*)
    (write_audio_data_to_file fname
			(+ SF_FORMAT_AIF SF_FORMAT_PCM_16)
			(convert SAMPLERATE)
			frames
			channels dat)))

;; now, the same audiofile writing for AudioBuffer tuples

(bind-func write_audio_buffer_to_file_with_format
  "write AudioBuffer tupe to audiofile file"
  (lambda (abuf:AudioBuffer* fname format)
    (let ((frames (num_frames abuf))
          (chans (num_channels abuf))
          (offset (frame_offset abuf))
          (subframes (num_subframes abuf))
          (rate (samplerate abuf))
          (data (sample_data abuf)))
      (if (> (+ offset subframes) frames)
          (begin (printf "Attempting to write off end of AudioBuffer")
                 0)
          (write_audio_data_to_file fname
                                    format
                                    (samplerate abuf)
                                    (num_subframes abuf)
                                    (num_channels abuf)
                                    (pref-ptr data offset))))))

(bind-func write_audio_buffer_to_file
  (lambda (abuf:AudioBuffer* fname)
    (write_audio_buffer_to_file_with_format abuf fname (+ SF_FORMAT_AIF SF_FORMAT_PCM_16))))

;; these write SAMPLE*
(bind-poly write_audio_file write_audio_data_to_file)
(bind-poly write_audio_file write_audio_data_to_file_default_sr)
(bind-poly write_audio_file write_audio_data_to_file_16bitAIFF)
;; these write AudioBuffer*
(bind-poly write_audio_file write_audio_buffer_to_file_with_format)
(bind-poly write_audio_file write_audio_buffer_to_file)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; read an audiofile into an audio buffer
;;

;; these for dat:SAMPLE* buffers
;; if dat is set to null then
;; read_audio_data will return number of frames*channels
(bind-func read_audio_file_into_data
  (lambda (fname offset num data:SAMPLE* print_info:i32)
    (let ((info:sf_info* (salloc))
          (audiofile (sf_open fname SFM_READ info))
          (channels (sf_channels info))
          (num_to_read (* num channels))
          (num_to_offset (* offset channels))
          (cnt (sf_seek audiofile num_to_offset 0))
          (samples_read (sf_read audiofile data num_to_read)))
      (if (<> null audiofile)
          (begin
            (if (> print_info 0)
                (begin
                  (printf "---------------\n")
                  (printf "file name:     %s\n" fname)
                  (printf "samplerate:    %d\n" (sf_samplerate info))
                  (printf "channels:      %d\n" (sf_channels info))
                  (printf "format:        %#x\n" (sf_format info))
                  (printf "frames:        %d\n" (sf_frames info))
                  (printf "samples read:  %lld\n" samples_read)))
            (sf_close audiofile))
          (printf "errors:  %s\n" (sf_strerror audiofile)))
      (if (null? data)
          (* (sf_frames info) channels) ;; frames * channels
          samples_read))))

(bind-func read_audio_file_into_data_with_offset
  "read the full audio file into memory starting at data"
  (lambda (fname data:SAMPLE* num)
    (read_audio_file_into_data fname 0 num data 0)))
;;
;; these return an AudioBuffer tuple
;;
(bind-func read_audio_file_into_buffer_with_offset
  "create and return an AudioBuffer from an audio file"
  (lambda (fname num:i64 offset:i64)
    (let ((info:sf_info* (salloc))
          (audiofile (sf_open fname SFM_READ info))
          (frames (sf_frames info))
          (rate (sf_samplerate info))
          (channels (sf_channels info)))
      (printf "FRAMES: %lld\n" frames)
      (if (> (+ offset num) frames)
          (begin (printf "Trying to load samples beyond end of %s\n" fname)
                 null)
          ;; todo check if the i32/i64 types are all ok in here
          (let ((abuf (create_audio_buffer num channels))
                (data (sample_data abuf))
                (num_to_read (* num channels))
                (num_to_offset (* offset channels))
                (cnt (sf_seek audiofile num_to_offset 0))
                (samples_read (sf_read audiofile data num_to_read)))
            (tset! abuf 4 rate)
            (sf_close audiofile)	    
            abuf)))))


(bind-func read_audio_file_into_buffer
  "create and return an AudioBuffer from an audio file"
  (lambda (fname num:i64)
    (read_audio_file_into_buffer_with_offset fname num 0)))


;; these read into a (provided) buffer of type SAMPLE*
(bind-poly read_audio_data read_audio_file_into_data)
(bind-poly read_audio_data read_audio_file_into_data_with_offset)
;; these read into (and return) an AudioBuffer
(bind-poly read_audio_data read_audio_file_into_buffer_with_offset)
(bind-poly read_audio_data read_audio_file_into_buffer)
