;;; ghttp.xtm -- libghttp bindings for extempore

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libghttp.dylib

;;; Commentary:

;; libghttp (GNOME HTTP library) bindings for Extempore. This is more
;; useful than the curl bindings (even though libcurl is a more
;; featureful library) because it doesn't rely on varargs C calls,
;; which we can't bind in xtlang

;;; Code:

(sys:load-preload-check 'ghttp)
(define *xtmlib-ghttp-loaded* #f)

(sys:load "libs/external/jansson.xtm")

;; set up the current dylib name and path (for precompilation)
(sys:precomp:set-dylib-name-info
 'libghttp
 (cond ((string=? (sys:platform) "OSX")
        "libghttp.dylib")
       ((string=? (sys:platform) "Linux")
        "libghttp.so")
       ((string=? (sys:platform) "Windows")
        "libghttp.dll")
       (else
        (begin (print-with-colors 'red 'default #f (print "Error"))
               (print ": unsupported platform ")
               (print-with-colors 'yellow 'default #f (print (sys:platform)))))))

;; load the dylib               
(define libghttp
  (sys:load-dylib (cdr *sys:precomp:current-load-dylib-info*)))

;;;;;;;;;;;;;;;;;;;;;;;
;; ghttp_constants.h ;;
;;;;;;;;;;;;;;;;;;;;;;;

;; NOTE: all these bind-lib-vals are currently broken!
;; (bind-lib-val libghttp http_hdr_Allow i8*)
;; (bind-lib-val libghttp http_hdr_Content_Encoding i8*)
;; (bind-lib-val libghttp http_hdr_Content_Language i8*)
;; (bind-lib-val libghttp http_hdr_Content_Length i8*)
;; (bind-lib-val libghttp http_hdr_Content_Location i8*)
;; (bind-lib-val libghttp http_hdr_Content_MD5 i8*)
;; (bind-lib-val libghttp http_hdr_Content_Range i8*)
;; (bind-lib-val libghttp http_hdr_Content_Type i8*)
;; (bind-lib-val libghttp http_hdr_Expires i8*)
;; (bind-lib-val libghttp http_hdr_Last_Modified i8*)

;; ;; /* general headers */

;; (bind-lib-val libghttp http_hdr_Cache_Control i8*)
;; (bind-lib-val libghttp http_hdr_Connection i8*)
;; (bind-lib-val libghttp http_hdr_Date i8*)
;; (bind-lib-val libghttp http_hdr_Pragma i8*)
;; (bind-lib-val libghttp http_hdr_Transfer_Encoding i8*)
;; (bind-lib-val libghttp http_hdr_Update i8*)
;; (bind-lib-val libghttp http_hdr_Trailer i8*)
;; (bind-lib-val libghttp http_hdr_Via i8*)

;; ;; /* request headers */

;; (bind-lib-val libghttp http_hdr_Accept i8*)
;; (bind-lib-val libghttp http_hdr_Accept_Charset i8*)
;; (bind-lib-val libghttp http_hdr_Accept_Encoding i8*)
;; (bind-lib-val libghttp http_hdr_Accept_Language i8*)
;; (bind-lib-val libghttp http_hdr_Authorization i8*)
;; (bind-lib-val libghttp http_hdr_Expect i8*)
;; (bind-lib-val libghttp http_hdr_From i8*)
;; (bind-lib-val libghttp http_hdr_Host i8*)
;; (bind-lib-val libghttp http_hdr_If_Modified_Since i8*)
;; (bind-lib-val libghttp http_hdr_If_Match i8*)
;; (bind-lib-val libghttp http_hdr_If_None_Match i8*)
;; (bind-lib-val libghttp http_hdr_If_Range i8*)
;; (bind-lib-val libghttp http_hdr_If_Unmodified_Since i8*)
;; (bind-lib-val libghttp http_hdr_Max_Forwards i8*)
;; (bind-lib-val libghttp http_hdr_Proxy_Authorization i8*)
;; (bind-lib-val libghttp http_hdr_Range i8*)
;; (bind-lib-val libghttp http_hdr_Referrer i8*)
;; (bind-lib-val libghttp http_hdr_TE i8*)
;; (bind-lib-val libghttp http_hdr_User_Agent i8*)

;; ;; /* response headers */

;; (bind-lib-val libghttp http_hdr_Accept_Ranges i8*)
;; (bind-lib-val libghttp http_hdr_Age i8*)
;; (bind-lib-val libghttp http_hdr_ETag i8*)
;; (bind-lib-val libghttp http_hdr_Location i8*)
;; (bind-lib-val libghttp http_hdr_Retry_After i8*)
;; (bind-lib-val libghttp http_hdr_Server i8*)
;; (bind-lib-val libghttp http_hdr_Vary i8*)
;; (bind-lib-val libghttp http_hdr_Warning i8*)
;; (bind-lib-val libghttp http_hdr_WWW_Authenticate i8*)

;; ;; /* Other headers */

;; (bind-lib-val libghttp http_hdr_Set_Cookie i8*)

;; ;; /* WebDAV headers */

;; (bind-lib-val libghttp http_hdr_DAV i8*)
;; (bind-lib-val libghttp http_hdr_Depth i8*)
;; (bind-lib-val libghttp http_hdr_Destination i8*)
;; (bind-lib-val libghttp http_hdr_If i8*)
;; (bind-lib-val libghttp http_hdr_Lock_Token i8*)
;; (bind-lib-val libghttp http_hdr_Overwrite i8*)
;; (bind-lib-val libghttp http_hdr_Status_URI i8*)
;; (bind-lib-val libghttp http_hdr_Timeout i8*)

;;;;;;;;;;;;;
;; ghttp.h ;;
;;;;;;;;;;;;;

(bind-alias ghttp_request i8)

(bind-alias ghttp_type enum)
(bind-val ghttp_type_get ghttp_type 0)
(bind-val ghttp_type_options ghttp_type 1)
(bind-val ghttp_type_head ghttp_type 2)
(bind-val ghttp_type_post ghttp_type 3)
(bind-val ghttp_type_put ghttp_type 4)
(bind-val ghttp_type_delete ghttp_type 5)
(bind-val ghttp_type_trace ghttp_type 6)
(bind-val ghttp_type_connect ghttp_type 7)
(bind-val ghttp_type_propfind ghttp_type 8)
(bind-val ghttp_type_proppatch ghttp_type 9)
(bind-val ghttp_type_mkcol ghttp_type 10)
(bind-val ghttp_type_copy ghttp_type 11)
(bind-val ghttp_type_move ghttp_type 12)
(bind-val ghttp_type_lock ghttp_type 13)
(bind-val ghttp_type_unlock ghttp_type 14)

(bind-alias ghttp_sync_mode enum)
(bind-val  ghttp_sync ghttp_sync_mode 0)
(bind-val  ghttp_async ghttp_sync_mode 1)

(bind-alias ghttp_status enum)
(bind-val ghttp_error ghttp_status -1)
(bind-val ghttp_not_done ghttp_status 0)
(bind-val ghttp_done ghttp_status 1)

(bind-alias ghttp_proc enum)
(bind-val ghttp_proc_none  ghttp_proc 0)
(bind-val ghttp_proc_request  ghttp_proc 1)
(bind-val ghttp_proc_response_hdrs  ghttp_proc 2)
(bind-val ghttp_proc_response  ghttp_proc 3)

;; typedef struct ghttp_current_status_tag
;; {
;;   ghttp_proc         proc;        ;; /* what's it doing? */
;;   int                bytes_read;  ;; /* how many bytes have been read? */
;;   int                bytes_total; ;; /* how many total */
;; } ghttp_current_status;
(bind-type ghttp_current_status <ghttp_proc,i32,i32>)

;; /* create a new request object */
(bind-lib libghttp ghttp_request_new [ghttp_request*]*)

;; /* delete a current request object */
(bind-lib libghttp ghttp_request_destroy [void,ghttp_request*]*)

;; /* Validate a uri
;;  * This will return -1 if a uri is invalid
;;  */
(bind-lib libghttp ghttp_uri_validate [i32,i8*]*)

;; /* Set a uri in a request
;;  * This will return -1 if the uri is invalid
;;  */

(bind-lib libghttp ghttp_set_uri [i32,ghttp_request*,i8*]*)

;; /* Set a proxy for a request
;;  * This will return -1 if the uri is invalid
;;  */

(bind-lib libghttp ghttp_set_proxy [i32,ghttp_request*,i8*]*)

;; /* Set a request type
;;  * This will return -1 if the request type is invalid or
;;  * unsupported
;;  */

(bind-lib libghttp ghttp_set_type [i32,ghttp_request*,ghttp_type]*)

;; /* Set the body.
;;  * This will return -1 if the request type doesn't support it
;;  */

(bind-lib libghttp ghttp_set_body [i32,ghttp_request*,i8*,i32]*)

;; /* Set whether or not you want to use sync or async mode.
;;  */

(bind-lib libghttp ghttp_set_sync [i32,ghttp_request*,ghttp_sync_mode]*)

;; /* Prepare a request.
;;  * Call this before trying to process a request or if you change the
;;  * uri.
;;  */

(bind-lib libghttp ghttp_prepare [i32,ghttp_request*]*)

;; /* Set the chunk size
;;  * You might want to do this to optimize for different connection speeds.
;;  */

(bind-lib libghttp ghttp_set_chunksize [void,ghttp_request*,i32]*)

;; /* Set a random request header
;;  */

;; ghttp_set_header(ghttp_request *a_request, const char *a_hdr, const char *a_val);
(bind-lib libghttp ghttp_set_header [void,ghttp_request*,i8*,i8*]*)

;; /* Process a request
;;  */

(bind-lib libghttp ghttp_process [ghttp_status,ghttp_request*]*)

;; /* Get the status of a request
;;  */

(bind-lib libghttp ghttp_get_status [ghttp_current_status,ghttp_request*]*)

;; /* Flush the received data (so far) into the response body.  This is
;;  * useful for asynchronous requests with large responses: you can
;;  * periodically flush the response buffer and parse the data that's
;;  * arrived so far.
;;  */

(bind-lib libghttp ghttp_flush_response_buffer [void,ghttp_request*]*)

;; /* Get the value of a random response header
;;  */

;; const char * ghttp_get_header(ghttp_request *a_request, const char *a_hdr);
(bind-lib libghttp ghttp_get_header [i8*,ghttp_request*,i8*]*)

;; /* Get the list of headers that were returned in the response.  You
;;    must free the returned string values.  This function will return 0
;;    on success, -1 on some kind of error. */
(bind-lib libghttp ghttp_get_header_names [i32,ghttp_request*,i8***,i32*]*)

;; /* Abort a currently running request.  */
(bind-lib libghttp ghttp_close [i32,ghttp_request*]*)

;; /* Clean a request
;;  */
(bind-lib libghttp ghttp_clean [void,ghttp_request*]*)

;; /* Get the socket associated with a particular connection
;;  */

(bind-lib libghttp ghttp_get_socket [i32,ghttp_request*]*)

;; /* get the return entity body
;;  */

(bind-lib libghttp ghttp_get_body [i8*,ghttp_request*]*)

;; /* get the returned length
;;  */

(bind-lib libghttp ghttp_get_body_len [i32,ghttp_request*]*)

;; /* Get an error message for a request that has failed.
;;  */

(bind-lib libghttp ghttp_get_error [i8*,ghttp_request*]*)

;; /* Parse a date string that is one of the standard
;;  * date formats
;;  */

(bind-alias time_t i64) ;; time_t is long on OSX-64
(bind-lib libghttp ghttp_parse_date [time_t,i8*]*)

;; /* Return the status code.
;;  */

(bind-lib libghttp ghttp_status_code [i32,ghttp_request*]*)

;; /* Return the reason phrase.
;;  */

(bind-lib libghttp ghttp_reason_phrase [i8*,ghttp_request*]*)

;; /* Set your username/password pair 
;;  */

(bind-lib libghttp ghttp_set_authinfo [i32,ghttp_request*,i8*,i8*]*)
		   

;; /* Set your username/password pair for proxy
;;  */
 
(bind-lib libghttp ghttp_set_proxy_authinfo [i32,ghttp_request*,i8*,i8*]*)

;; some helpful xtlang functions

(bind-func ghttp_set_extempore_user_agent
  (lambda (request)
    (ghttp_set_header request "User-Agent" "extempore-http/0.1")))

;; don't forget to destroy the request when you're done
(bind-func ghttp_perform_get
  (lambda (uri:i8*)
    (let ((request:ghttp_request* (ghttp_request_new)))
      (ghttp_set_extempore_user_agent request)
      (ghttp_set_type request ghttp_type_get)
      (if (= (ghttp_set_uri request uri) -1)
          (begin (println "Error: invalid uri")
                 (ghttp_request_destroy request)
                 null)
          (begin
            (ghttp_prepare request)
            (if (= (ghttp_process request) ghttp_error)
                (begin (println "ghttp Error:" (ghttp_get_error request))
                       (ghttp_request_destroy request)
                       null)
                request))))))

(bind-func ghttp_perform_put
  (lambda (uri:i8* body:i8* bodylen:i32)
    (let ((request:ghttp_request* (ghttp_request_new))) 
      (ghttp_set_extempore_user_agent request)
      (ghttp_set_type request ghttp_type_put)
      (if (= (ghttp_set_uri request uri) -1)
          (begin (println "Error: invalid uri: " uri)
                 (ghttp_request_destroy request))
          (begin (ghttp_set_body request body bodylen)
                 (ghttp_prepare request)
                 (if (= (ghttp_process request) ghttp_error)
                     (begin (println "ghttp Error:" (ghttp_get_error request))
                            (ghttp_request_destroy request)))))
      request)))

(bind-func ghttp_perform_post
  (lambda (uri:i8* body:i8* bodylen:i32)
    (let ((request:ghttp_request* (ghttp_request_new))) 
      (ghttp_set_extempore_user_agent request)
      (ghttp_set_type request ghttp_type_post)
      (if (= (ghttp_set_uri request uri) -1)
          (begin (println "Error: invalid uri: " uri)
                 (ghttp_request_destroy request))
          (begin (ghttp_set_body request body bodylen)
                 (ghttp_prepare request)
                 (if (= (ghttp_process request) ghttp_error)
                     (begin (println "ghttp Error:" (ghttp_get_error request))
                            (ghttp_request_destroy request)))))
      request)))

(bind-func ghttp_perform_delete
  (lambda (uri:i8*)
    (let ((request:ghttp_request* (ghttp_request_new)))
      (ghttp_set_extempore_user_agent request)
      (ghttp_set_type request ghttp_type_delete)
      (if (= (ghttp_set_uri request uri) -1)
          (begin (println "Error: invalid uri")
                 (ghttp_request_destroy request)
                 null)
          (begin
            (ghttp_prepare request)
            (if (= (ghttp_process request) ghttp_error)
                (begin (println "ghttp Error:" (ghttp_get_error request))
                       (ghttp_request_destroy request)
                       null)
                request))))))

(bind-func ghttp_request_body_copy
  (lambda (request:ghttp_request* buf:i8* bufsize:i64)
    (if (null? request)
        (println "Error: request is null.")
        (let ((bytes_read (convert (ghttp_get_body_len request) i64)))
          ;;(println "HTTP status:" (ghttp_status_code request))
          (if (> bytes_read 0)
              (if (<= bytes_read bufsize)
                  (begin (memcpy buf (ghttp_get_body request) bytes_read)
                         void)
                  (begin
                    (memcpy buf (ghttp_get_body request) bufsize)
                    (println "Warning: HTTP response body (" bytes_read " bytes) is too big for buffer (" bufsize " bytes).  Dropping the rest of the body."))))))))

;; (bind-func ghttp_get_hdr
;;   (lambda (request:ghttp_request* hdr:i8*)
;;     (if (null? request)
;;         (begin (println "Error: request is null.")
;;                null)
;;         (ghttp_get_header request hdr))))

(bind-func ghttp_request_print_headers
  (lambda (request:ghttp_request*)
    (if (null? request)
        (println "Error: request is null.")
        (let ((hdrptr:i8*** (salloc))
              (hdrcount:i32* (salloc))
              (i 0))
          (ghttp_get_header_names request hdrptr hdrcount)
          (println "HTTP headers:")
          (dotimes (i (convert (pref hdrcount 0) i64))
            (printf "%s: %s\n"
                    (pref (pref hdrptr 0) i)
                    (ghttp_get_header request (pref (pref hdrptr 0) i)))
            (free (pref (pref hdrptr 0) i)))))))

(bind-func ghttp_request_print_body
  (lambda (request:ghttp_request*)
    (if (not (null? request))
          (begin (printf "Status code:\n %s\n" (ghttp_reason_phrase request))
                 (printf "Response:\n %s\n" (ghttp_get_body request))))))

;; perform a request, dump response to log.  useful for testing

(bind-func ghttp_print_get_response
  (lambda (host:i8*)
    (let ((request:ghttp_request* null)
          (status -1))
      (set! request (ghttp_perform_get host))
      (set! status (ghttp_status_code request))
      (ghttp_request_print_headers request)
      (ghttp_request_print_body request)
      (ghttp_request_destroy request)
      status)))

(bind-func ghttp_print_post_response
  (lambda (host:i8* body:i8*)
    (let ((bodylen (convert (strlen body) i32))
          (request:ghttp_request* null)
          (status -1))
      (set! request (ghttp_perform_post host body bodylen))
      (set! status (ghttp_status_code request))
      (ghttp_request_print_headers request)
      (ghttp_request_print_body request)
      (ghttp_request_destroy request)
      status)))

;; JSON versions

(bind-func ghttp_get_response_json
  (lambda (host:i8*)
    (let ((request:ghttp_request* null)
          (status -1)
          (err:json_error_t* (zalloc)))
      (set! request (ghttp_perform_get host))
      (set! status (ghttp_status_code request))
      (let ((json (json_loadb (ghttp_get_body request)
                              (convert (ghttp_get_body_len request))
                              0
                              err)))
        (if (null? json)
            (printf "JSON error on line %d: %s\n" (tref err 0) (tref err 4)))
        (ghttp_request_destroy request)
        json))))

(bind-func ghttp_post_response_json
  (lambda (host:i8* body:i8*)
    (let ((request:ghttp_request* null)
          (status -1)
          (bodylen (convert (strlen body) i32))
          (err:json_error_t* (zalloc)))
      (set! request (ghttp_perform_post host body bodylen))
      (set! status (ghttp_status_code request))
      (let ((json (json_loadb (ghttp_get_body request)
                              (convert (ghttp_get_body_len request))
                              0
                              err)))
        (if (null? json)
            (printf "JSON error on line %d: %s\n" (tref err 0) (tref err 4)))
        (ghttp_request_destroy request)
        json))))

(define *xtmlib-ghttp-loaded* #t)
