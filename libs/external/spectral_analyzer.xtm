
;;; spectral_analyzer.xtm -- spectral metering example

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libCairo, kiss_fft, libsndfile, libSOIL

;;; Commentary:

;; An openGL-based spectral analyzer in xtlang

;;; Code:

;; need to create the context before loading the graphics library
(define ctx (gl:make-ctx ":0.0" #f 0.0 0.0 1080.0 720.0))

;; load the libraries we need
(load "libs/core/dsp.xtm")
;; (load "libs/external/sndfile.xtm")
(load "libs/external/fft.xtm")
;; (load "libs/external/cairo.xtm")
(load "libs/external/opengl.xtm")

(bind-func fill_noise_buff
  (let ((i 0)
        (filter (lpf_c))
        (lfo (osc_c 0.0)))
    (lambda (buf:cpxd* len)
      (dotimes (i len)
        (tset! (pref-ptr buf i) 0
               (filter (random) 1000.0 0.1)))
      buf)))

(bind-func dsp:DSP 100000000 ; make sure we allocate enough memory
  (let ((buflen 256)
        ;; time domain (complex) signal
        (td_buffer:cpxd* (zalloc buflen))
        ;; frequency domain (magnitude) spectrum
        (fd_buffer:cpxd* (zalloc buflen))
        (playhead 0))
    (lambda (in time chan dat)
      (if (and (= (modulo (dtoi64 time) buflen) 0)
               (< chan 0.5))
          (begin (fill_noise_buff td_buffer buflen)
                 (fft_cpxd td_buffer fd_buffer buflen)))
      (let ((out (tref (pref td_buffer playhead) 0)))
        (if (< chan 0.5)
            (set! playhead (modulo (+ playhead 1) buflen)))
        out))))

(dsp:set! dsp)

(bind-func draw_spectrogram
  (let ((i 0.0))
    (lambda (ptr:cpxd* len:i64)
      (glClear (+ GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
      (glLoadIdentity)
      (glTranslated -1.0 -1.0 0.0)
      (glBegin GL_LINES)
      ;; main drawing loop
      (dotimes (i len)
        (let ((val (* 0.1 (magnitude_squared_cpx (pref-ptr ptr (dtoi64 i))))))
          (glColor3d (* 0.8 val) (+ 0.6 (* 0.3 (/ i len))) 0.3)
          (glVertex2d (* 2.0 (/ i len)) val)))
      (glEnd))))

;; the draw loop -- remember this is in scheme, not xtlang
(define spectrogram-drawloop
  (lambda (time fps)
    (draw_spectrogram (dsp.fd_buffer) (dsp.buflen))
    (gl:swap-buffers ctx)
    (callback (+ time (* 0.5 (/ *samplerate* fps)))
              'spectrogram-drawloop
              (+ time (/ *samplerate* fps))
              fps)))

(spectrogram-drawloop (now) 30)
