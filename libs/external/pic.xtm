;;; pic.xtm:libs -- PIC plasma physics simulation library

;; Author: Ben Swift
;; Keywords: extempore
;; Required dylibs: libcpic2.dylib

;;; Commentary:

;; This library uses Viktor Decyk's PIC simulation codes
;; (https://idre.ucla.edu/hpc/parallel-plasma-pic-codes) to perform a
;; particle-in-cell plasma physics simulation

;; To use this library in Extempore, first get the (slightly modified)
;; cpic2 code from

;; https://github.com/benswift/pic2

;; then build thd dylib with `make shared'

;; then see examples/external/pic.xtm

;;; Code:

(sys:load "libs/external/soil.xtm")
(sys:load "libs/external/shaders.xtm")

;; set up the current dylib name and path (for precompilation)
(sys:precomp:set-dylib-name-info
 'libcpic2
 (cond ((string=? (sys:platform) "OSX")
        "libcpic2.dylib")
       ((string=? (sys:platform) "Linux")
        "libcpic2.so")
       ((string=? (sys:platform) "Windows")
        "libcpic2.dll")
       (else
        (begin (print-with-colors 'red 'default #f (print "Error"))
               (print ": unsupported platform ")
               (print-with-colors 'yellow 'default #f (print (sys:platform)))))))

;; load the dylib
(define libcpic2
  (sys:load-dylib (cdr *sys:precomp:current-load-dylib-info*)))

(bind-type timeval <i64,i64>) ;; <time_t,suseconds_t>

;; from pic2.h

(bind-lib libcpic2 dtimer [void,double*,timeval*,i32]*)
(bind-lib libcpic2 main [i32,i32,i8**]*)

;; from push2.h

(bind-lib libcpic2 ranorm [double]*)
(bind-lib libcpic2 randum [double]*)
(bind-lib libcpic2 cdistr2 [void,float*,float,float,float,float,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libcpic2 cgpush2l [void,float*,float*,float,float,float*,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libcpic2 cdgpush2l [void,double*,double*,double,double,double*,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libcpic2 cgpost2l [void,float*,float*,float,i32,i32,i32,i32]*)
(bind-lib libcpic2 cdsortp2yl [void,float*,float*,i32*,i32,i32,i32]*)
(bind-lib libcpic2 ccguard2l [void,float*,i32,i32,i32,i32]*)
(bind-lib libcpic2 caguard2l [void,float*,i32,i32,i32,i32]*)
(bind-lib libcpic2 cpois22 [void,cpxf*,cpxf*,i32,cpxf*,float,float,float,float*,i32,i32,i32,i32,i32,i32]*)
(bind-lib libcpic2 cwfft2rinit [void,i32*,cpxf*,i32,i32,i32,i32]*)
(bind-lib libcpic2 cfft2rxx [void,cpxf*,i32,i32*,cpxf*,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libcpic2 cfft2rxy [void,cpxf*,i32,i32*,cpxf*,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libcpic2 cfft2r2x [void,cpxf*,i32,i32*,cpxf*,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libcpic2 cfft2r2y [void,cpxf*,i32,i32*,cpxf*,i32,i32,i32,i32,i32,i32,i32,i32]*)
(bind-lib libcpic2 cwfft2rx [void,cpxf*,i32,i32*,cpxf*,i32,i32,i32,i32,i32,i32]*)
(bind-lib libcpic2 cwfft2r2 [void,cpxf*,i32,i32*,cpxf*,i32,i32,i32,i32,i32,i32]*)

;; main

(bind-func run_main
  (lambda ()
    (main 0 null)))

;; (run_main)

;; now for the xtlang version

;; allocate arrays for standard code
(bind-val part float*)
(bind-val part2 float*)
(bind-val tpart float*)
(bind-val qe float*)
(bind-val fxye float*)
(bind-val ffc cpxf*)
(bind-val mixup i32*)
(bind-val sct cpxf*)
(bind-val npicy i32*)
;; and a vbo for the graphics code
(bind-val vbo E_vbo*)

(bind-func allocate_arrays
  (lambda (np:i32 nx:i32 ny:i32)
    (let ((part_ptr (halloc (* 4 np)))  ;; idimp = 4
          (part2_ptr (halloc (* 4 np))) ;; idimp = 4
          (qe_ptr (halloc (* (+ nx 2) (+ ny 1))))
          (fxye_ptr (halloc (* 2 (+ nx 2) (+ ny 1)))) ;; ndim = 2
          (ffc_ptr (halloc (* (/ nx 2) (/ ny 2))))
          (mixup_ptr (halloc (max2i32 (/ nx 2) ny)))
          (sct_ptr (halloc (/ (max2i32 nx ny) 2)))
          (npicy_ptr (halloc (+ ny 1))))
      (set! part part_ptr)
      (set! vbo (create_vbo (* np 16)
                            (cast part i8*)
                            GL_STREAM_DRAW))
      (set! part2 part2_ptr)
      (set! qe qe_ptr)
      (set! fxye fxye_ptr)
      (set! ffc ffc_ptr)
      (set! mixup mixup_ptr)
      (set! sct sct_ptr)
      (set! npicy npicy_ptr)
      (println "Allocated memory for data arrays, np:" np "nx:" nx "ny:" ny)
      void)))

(bind-func free_arrays
  (lambda ()
    (free part)
    (free part2)
    (free qe)
    (free fxye)
    (free ffc)
    (free mixup)
    (free sct)
    (free npicy)))

(bind-func particle_range
  (lambda (np)
    (let ((minx:float 0.)
          (miny:float 0.)
          (maxx:float 0.)
          (maxy:float 0.)
          (minvx:float 0.)
          (minvy:float 0.)
          (maxvx:float 0.)
          (maxvy:float 0.)
          (x 0.)
          (y 0.)
          (vx 0.)
          (vy 0.))
      (doloop (i np)
        (set! x (pref part (* 4 i)))
        (set! y (pref part (+ (* 4 i) 1)))
        (set! vx (pref part (+ (* 4 i) 2)))
        (set! vy (pref part (+ (* 4 i) 3)))
        (if (< x minx) (set! minx x))
        (if (< y miny) (set! miny y))
        (if (> x maxx) (set! maxx x))
        (if (> y maxy) (set! maxy y))
        (if (< vx minvx) (set! minvx vx))
        (if (< vy minvy) (set! minvy vy))
        (if (> vx maxvx) (set! maxvx vx))
        (if (> vy maxvy) (set! maxvy vy))
        )
      (println "minx:" minx "miny:" miny)
      (println "maxx:" maxx "maxy:" maxy)
      (println "minvx:" minvx "minvy:" minvy)
      (println "maxvx:" maxvx "maxvy:" maxvy))))

(bind-func init_particles
  (lambda (np:i32 nx:i32 ny:i32)
    (doloop (i np)
      (pset! part (* i 4) (random (convert nx float)))
      (pset! part (+ (* i 4) 1) (random (convert ny float)))
      (pset! part (+ (* i 4) 2) (* 2. (random -1. 1.)))
      (pset! part (+ (* i 4) 3) (* 2. (random -1. 1.))))))

;; this currently crashes everything!
(bind-func inject_particle_velocity
  (lambda (np:i32 minx miny maxx maxy amount)
    (doloop (i np)
      (let ((x (pref part (+ (* i 4) 0)))
            (y (pref part (+ (* i 4) 1)))
            (vx (pref part (+ (* i 4) 2)))
            (vy (pref part (+ (* i 4) 3))))
        (if (and (> x minx)
                 (< x maxx))
            (pset! part (+ (* i 4) 2) (+ vx (* amount (random -1. 1.)))))
        (if (and (> y miny)
                 (< y maxy))
            (pset! part (+ (* i 4) 2) (+ vy (* amount (random -1. 1.)))))))))


;; need to set up the graphics context before we create the VBO or
;; it'll crash

(define width 1920.0)
(define height 1080.0)
(bind-val width float 1920.0)
(bind-val height float 1080.0)
(define fullscreen #t)

(define *gl-ctx* (gl:make-ctx ":0" fullscreen 0. 0. width height))

(define *max-grid-size* (real->integer (expt 2 9)))
(define *max-num-particles* (real->integer (* 3072 3072)))

(allocate_arrays *max-num-particles* *max-grid-size* *max-grid-size*)

;; 4 floats (4 bytes each) = 16 bytes
(bind-func pic_set_vbo_data_size
  (lambda (npx npy)
    (tset! vbo 1 (* (* npx npy) 16))))

(bind-func pic_step
  (let ( ;; parameters
        (indx:i32 8) ;; this can be up to 9
        (indy:i32 8) ;; this can be up to 9
        (npx:i32 200) ;; this can be up to 3072
        (npy:i32 200) ;; this can be up to 3072
        (ndim:i32 2)
        (tend:float 10.)
        (dt:float .1)
        (qme:float -1.)
        (vtx:float 1.)
        (vty:float 1.)
        (vx0:float 0.)
        (vy0:float 0.)
        (ax:float .912871)
        (ay:float .912871)
        (idimp:i32 4)
        (ipbc:i32 1)
        (wke:float* (zalloc))
        (we:float* (zalloc))
        (wt:float 0.)
        ;; scalars for standard code
        (j:i32 0)
        (np:i32 (* npx npy))
        (nx:i32 (<< 1:i32 indx)) ;; only works for indx < 2^31
        (ny:i32 (<< 1:i32 indy)) ;; only works for indx < 2^31
        (nxh:i32 (/ nx 2))
        (nyh:i32 (/ ny 2))
        (nxe:i32 (+ nx 2))
        (nye:i32 (+ ny 1))
        (nxeh:i32 (/ nxe 2))
        (nxyh:i32 (/ (max nx ny) 2))
        (nxhy:i32 (max nxh ny))
        (ny1:i32 (+ ny 1))
        (ntime:i32 0)
        (nloop:i32 (convert (+ (/ tend dt) .0001)))
        (isign:i32 0)
        (qbme:float qme)
        (affp:float (/ (convert (* nx ny) float)
                       (convert np float)))
        ;; timing stuff
        (time:float 0.)
        (itime:timeval* (zalloc))
        (tdpost:float 0.)
        (tguard:float 0.)
        (tfft:float 0.)
        (tfield:float 0.)
        (tpush:float 0.)
        (tsort:float 0.)
        (dtime:double* (zalloc))
        (sortime:i32 0)
        ;; 16 bytes per particle: 4 floats (x,y,vx,vy)
        (print_details (lambda ()
                         (println "deposit time =" tdpost)
                         (println "guard time =" tguard)
                         (println "solver time =" tfield)
                         (println "fft time =" tfft)
                         (println "push time =" tpush)
                         (println "sort time =" tsort)
                         (set! tfield (+ tfield tguard tfft))
                         (println "total solver time =" tfield)
                         (set! time (+ tdpost tpush tsort))
                         (println "total particle time =" time)
                         (set! wt (+ time tfield))
                         (println "total time =" wt)
                         (println)
                         (set! wt (/ 1.0e9 (convert (* nloop np))))
                         (println "Push Time (nsec) =" (* tpush wt))
                         (println "Deposit Time (nsec) =" (* tdpost wt))
                         (println "Sort Time (nsec) =" (* tsort wt))
                         (println "Total Particle Time (nsec) =" (* time wt) "\n"))))
    ;; initial setup
    (cwfft2rinit mixup sct indx indy nxhy nxyh)
    ;; calculate form factors
    (set! isign 0)
    (cpois22 (cast qe cpxf*)
             (cast fxye cpxf*)
             isign ffc ax ay affp we nx ny nxeh nye nxh nyh)
    ;; initialize electrons
    (cdistr2 part vtx vty vx0 vy0 npx npy idimp np nx ny ipbc)
    ;; (print_energies (pref we 0) (pref wke 0) "Initial energies")
    (lambda ()
      ;; (printf "part = %p part2 = %p vbo ref 2 = %p\n" part part2 (tref vbo 2))
      ;; (if (= (% ntime 10) 0)
      ;;     (println "ntime:" ntime))
      (dtimer dtime itime -1)
      (doloop (j (* nxe nye))
        (pset! qe j 0.))
      (cgpost2l part qe qme np idimp nxe nye)
      (dtimer dtime itime 1)
      (set! time (convert (pref dtime 0)))
      (set! tdpost (+ tdpost time))
      ;; (println "tdpost:" tdpost)
      ;; add guard cells with standard procedure: updates qe
      (dtimer dtime itime -1)
      (caguard2l qe nx ny nxe nye)
      (dtimer dtime itime 1)
      (set! time (convert (pref dtime 0)))
      (set! tguard (+ tguard time))
      ;; (println "tguard:" tguard)
      ;; transform charge to fourier space with standard procedure:
      ;; updates qe
      (dtimer dtime itime -1)
      (set! isign -1)
      (cwfft2rx (cast qe cpxf*) isign mixup sct indx indy nxeh nye nxhy nxyh)
      (dtimer dtime itime 1)
      (set! time (convert (pref dtime 0)))
      (set! tfft (+ tfft time))
      ;; (println "tfft:" tfft)
      ;; calculate force/charge in fourier space with standard
      ;; procedure: updates fxye
      (dtimer dtime itime -1)
      (set! isign -1)
      (cpois22 (cast qe cpxf*)
               (cast fxye cpxf*)
               isign ffc ax ay affp we nx ny nxeh nye nxh nyh)
      (dtimer dtime itime 1)
      (set! time (convert (pref dtime 0)))
      (set! tfield (+ tfield time))
      ;; (println "tfield:" tfield)
      ;; transform force to real space with standard procedure: updates fxye
      (dtimer dtime itime -1)
      (set! isign 1)
      (cwfft2r2 (cast fxye cpxf*) isign mixup sct indx indy nxeh nye nxhy nxyh)
      (dtimer dtime itime 1)
      (set! time (convert (pref dtime 0)))
      (set! tfft (+ tfft time))
      ;; (println "tfft:" tfft)
      ;; copy guard cells with standard procedure: updates fxye
      (dtimer dtime itime -1)
      (ccguard2l fxye nx ny nxe nye)
      (dtimer dtime itime 1)
      (set! time (convert (pref dtime 0)))
      (set! tguard (+ tguard time))
      ;; (println "tguard:" tguard)
      ;; push particles with standard procedure: updates part, wke
      (pset! wke 0 0.)
      (dtimer dtime itime -1)
      (cgpush2l part fxye qbme dt wke idimp np nx ny nxe nye ipbc)
      (dtimer dtime itime 1)
      (set! time (convert (pref dtime 0)))
      (set! tpush (+ tpush time))
      ;; (println "tpush:" tpush)
      ;; sort particles by cell for standard procedure
      (if (and (> sortime 0) (= (% ntime sortime) 0))
          (begin (dtimer dtime itime -1)
                 (cdsortp2yl part part2 npicy idimp np ny1)
                 ;; exchange pointers
                 (set! tpart part)
                 (set! part part2)
                 (set! part2 tpart)
                 (dtimer dtime itime 1)
                 (set! time (convert (pref dtime 0)))
                 (set! tsort (+ tsort time))
                 void))
      (set! ntime (+ ntime 1))
      (if (= ntime 100)
          (print_details))
      ntime)))

(pic_set_vbo_data_size (pic_step.npx)
                       (pic_step.npy))

(bind-func print_energies
  (lambda (header_string:i8*)
    (let ((field_energy
           (pref (pic_step.we:float*) 0))
          (kinetic_energy
           (pref (pic_step.wke:float*) 0)))
      (printf "\n%s:\n\n" header_string)
      (printf "field_energy:    %g\n" (convert field_energy double))
      (printf "kinetic_energy:  %g\n" (convert kinetic_energy double))
      (printf "total_energy:    %g\n" (convert (+ field_energy kinetic_energy) double)))))

;;

;; visualisation code

(bind-val texture1 i32 0)

(bind-func load-tex
  (lambda (tex_path id)
    (let ((t (gl_load_image tex_path id)))
      (set! texture1 t)
      (printf "texture: %d\n" texture1)
      void)))

;; 0 meaning load texture into new id
(load-tex "assets/images/star.png" 0)

(bind-val particle_shader i32 0)

(bind-func update_shader_program
  (lambda (vert:i8* frag:i8*)
    (set! particle_shader (create_shader vert frag))))

(update_shader_program
 "// VERTEX SHADER
// GLSL 1.2 compatible

//varying vec2 TexCoord;

attribute vec2 pvert;
uniform float nx;
attribute vec2 pvel;

void main() {
   gl_PointSize = 14.+0.*length(pvel);
   gl_FrontColor = vec4(0.,.5,1.,1.0);
   gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * (vec4(pvert.x/(nx/2.0),pvert.y/(nx/2.0),0.0,1.0) - vec4(1.,1.,0.,0.));
   //TexCoord = gl_MultiTexCoord0.st;
}"


 "//  FRAGMENT SHADER
// #version 330

#version 120

#extension GL_ARB_texture_rectangle : disable

uniform sampler2D tex1;

//varying vec2 TexCoord;

void main() {
   gl_FragColor = texture2D(tex1,gl_PointCoord)*gl_Color;
   //gl_FragColor = gl_Color;
}")

(bind-func gl_draw
  (let ((vert_loc:i32 -1)
        (vel_loc:i32 -1)
        (nx_loc:i32 -1))
    (lambda (nx:i32)
      (if (or (= vert_loc -1)
              (= vel_loc -1)
              (= nx_loc -1))
          (begin
            (set! vert_loc (glGetAttribLocation particle_shader "pvert"))
            (set! vel_loc (glGetAttribLocation particle_shader "pvel"))
            (set! nx_loc (glGetUniformLocation particle_shader "nx"))))
      (let ((np (/ (tref vbo 1) 16)))
        (glClearColor 0.0 0.0 0.0 1.0)
        (glClear (+ GL_DEPTH_BUFFER_BIT GL_COLOR_BUFFER_BIT))
        (glLoadIdentity)
        ;; gl setup
        (glEnable GL_BLEND)
        (glDisable GL_DEPTH_TEST)
        (glDepthMask GL_FALSE)
        (glBlendFunc GL_SRC_ALPHA GL_ONE)
        (glEnable GL_POINT_SPRITE)
        (glEnable GL_VERTEX_PROGRAM_POINT_SIZE)
        ;; shader program
        (glUseProgram particle_shader)
        ;; set uniform
        (glUniform1f nx_loc (convert nx float))
        ;; vbo stuff
        (glBindBuffer GL_ARRAY_BUFFER (tref vbo 0))
        (glBufferSubData GL_ARRAY_BUFFER 0 (tref vbo 1) (tref vbo 2))
        (glEnableVertexAttribArray vert_loc)
        (glVertexAttribPointer vert_loc 2 GL_FLOAT GL_FALSE 16 null) ;(pref-ptr (cast null i8*) 0))
        (glEnableVertexAttribArray vel_loc)
        (glVertexAttribPointer vel_loc 2 GL_FLOAT GL_FALSE 16 (pref-ptr (cast null i8*) 8))
        ;; texture setup
        (glActiveTexture GL_TEXTURE0)
        (glDisable GL_TEXTURE_RECTANGLE_ARB)
        (glEnable GL_TEXTURE_2D)
        (glBindTexture GL_TEXTURE_2D texture1)
        (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_S GL_CLAMP_TO_EDGE)
        (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_WRAP_T GL_CLAMP_TO_EDGE)
        (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR)
        (glTexParameteri GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR)
        (glTexEnvi GL_POINT_SPRITE GL_COORD_REPLACE 1)
        (glUniform1i (glGetUniformLocation particle_shader "tex1") 0)
        ;; draw the points
        (glDrawArrays GL_POINTS 0 np)
        ;; disable texture
        (glActiveTexture GL_TEXTURE0)
        (glBindTexture GL_TEXTURE_2D 0)
        (glDisable GL_TEXTURE_2D)
        ;; disable attribs
        (glDisableVertexAttribArray vert_loc)
        ;; (glDisableVertexAttribArray my_colour)
        ;; (glDisableVertexAttribArray my_size)
        ;; (glDisableVertexAttribArray vel_loc)
        ;; unbind the buffer
        (glBindBuffer GL_ARRAY_BUFFER 0)
        (glDisable GL_VERTEX_PROGRAM_POINT_SIZE)
        (glDisable GL_POINT_SPRITE)
        ;; un-set the GL stuff
        (glDisable GL_BLEND)
        (glEnable GL_DEPTH_TEST)
        (glDepthMask GL_TRUE)
        ;; print errors (if there are any)
        (gl_print_error))
      1)))

(define run-simulation
  (lambda (time delta-t)
    (let ((ntime (pic_step)))
      (if (= (modulo ntime 1000) 0)
          (println 'ntime: ntime)))
    ;; (draw_energy_hud)
    (gl_draw (pic_step.nx))
    (gl:swap-buffers *gl-ctx*)
    (let ((next-time (max (+ time (* *second* delta-t)) (now))))
      (callback next-time
                'run-simulation
                next-time
                delta-t))))
