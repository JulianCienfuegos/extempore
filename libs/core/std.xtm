;; 
;; Copyright (c) 2011, Andrew Sorensen
;; 
;; All rights reserved.
;; 
;; 
;; Redistribution and use in source and binary forms, with or without 
;; modification, are permitted provided that the following conditions are met:
;; 
;; 1. Redistributions of source code must retain the above copyright notice, 
;;    this list of conditions and the following disclaimer.
;; 
;; 2. Redistributions in binary form must reproduce the above copyright notice,
;;    this list of conditions and the following disclaimer in the documentation 
;;    and/or other materials provided with the distribution.
;; 
;; Neither the name of the authors nor other contributors may be used to endorse
;; or promote products derived from this software without specific prior written 
;; permission.
;; 
;; 
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
;; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
;; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
;; ARE DISCLEXTD. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
;; LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
;; CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
;; SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
;; INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
;; CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
;; ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
;; POSSIBILITY OF SUCH DAMAGE.
;; 
;; 


;; std.xtm is loaded automatically by all processes on startup
;; std.xtm is for xtlang as scheme.xtm is for scheme.

;; lib-loading config

(sys:load "libs/std.xtm" 'quiet)
(sys:load-preload-check 'std)
(define *xtmlib-std-loaded* #f)

(sys:precomp:insert-header "xtmstd")

;; (suppress-compiler-messages #f)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; SETUP NAN's
(bind-val NaNf float 0.0)
(bind-val NaNd double 0.0)

(bind-func set_float_nans_
  (lambda ()
    (let ((nan32 #x7FC00000)
          (nan64 #x7FFC000000000000)
          (n32:i32* (alloc))
          (n64:i64* (alloc)))
      (pset! n32 0 nan32)
      (pset! n64 0 nan64)
      (set! NaNf (pref (cast n32 float*) 0))
      (set! NaNd (pref (cast n64 double*) 0))
      void)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; some global aliases

(bind-alias bool i1)
(if (= (sys:pointer-size) 64)
    (bind-alias size_t i64)
    (bind-alias size_t i32))
(bind-alias enum i32)

;;;;;;;;;;;;; this for audio ;;;;;;;;;;;;;;;;;;
;; THESE ALL NEED TO BE CHANGED TOGETHER!!!!
(bind-alias SAMPLE float)
(bind-alias DSP [SAMPLE,SAMPLE,i64,i64,SAMPLE*]*)
(bind-alias DSPMT [SAMPLE,SAMPLE*,i64,i64,SAMPLE*]*)
(bind-alias DSPMC [void,float*,float*,i64,i8*]*)
(bind-alias DSPMT [SAMPLE,SAMPLE*,i64,i64,SAMPLE*]*)
(bind-alias DSPMCMT [void,float**,float*,i64,i8*]*)
(bind-func audio_64bit (lambda () #f))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bind-poly random imp_randf)
(bind-poly random imp_randd)
(bind-poly random imp_rand1_i32)
(bind-poly random imp_rand2_i32)
(bind-poly random imp_rand1_i64)
(bind-poly random imp_rand2_i64)
(bind-poly random imp_rand1_f)
(bind-poly random imp_rand2_f)
(bind-poly random imp_rand1_d)
(bind-poly random imp_rand2_d)

;(bind-poly cos cosf)
;(bind-poly cos llvm_cos)
;(bind-poly sin sinf)
;(bind-poly sin llvm_sin)
(bind-poly tan tanf)
(bind-poly tan llvm_tan)
(bind-poly cosh coshf)
(bind-poly cosh llvm_cosh)
(bind-poly tanh tanhf)
(bind-poly tanh llvm_tanh)
(bind-poly sinh sinhf)
(bind-poly sinh llvm_sinh)
(bind-poly acos acosf)
(bind-poly acos llvm_acos)
(bind-poly asin asinf)
(bind-poly asin llvm_asin)
(bind-poly atan atanf)
(bind-poly atan llvm_atan)
(bind-poly atan2 atan2f)
(bind-poly atan2 llvm_atan2)
;; (bind-poly ceil ceilf)
;; (bind-poly ceil llvm_ceil)
;; (bind-poly floor floorf)
;; (bind-poly floor llvm_floor)
;; (bind-poly exp expf)
;; (bind-poly exp llvm_exp)
;; (bind-poly fmod fmodf)
;; (bind-poly fmod llvm_fmod)
;; (bind-poly pow powf)
;; (bind-poly pow llvm_pow)
;; (bind-poly log logf)
;; (bind-poly log llvm_log)
;; (bind-poly log2 log2f) 
;; (bind-poly log2 llvm_log2) 
;; (bind-poly log10 log10f)
;; (bind-poly log10 llvm_log10)
;; (bind-poly sqrt sqrtf)
;; (bind-poly sqrt llvm_sqrt)
;; (bind-poly fabs fabsf)
;; (bind-poly fabs llvm_fabs)

;;;;;;;;;;;;;;;;
;; printing

;; prints a line break
(bind-func print_return
  (lambda () (llvm_printf "\n") void))

;; prints a space
(bind-func print_space
  (lambda () (printf " ") void))

(bind-func print_i1
  (lambda (x:i1) (printf "%d" x) void))

(bind-func print_i8
  (lambda (x:i8) (printf "%d" x) void))

(bind-func print_i32
  (lambda (x:i32) (printf "%d" x) void))

(bind-func print_i64
  (lambda (x:i64) (printf "%lld" x) void))

(bind-func print_f
  (lambda (x:float) (printf "%f" (ftod x)) void))

(bind-func print_d
  (lambda (x:double) (printf "%f" x) void))

(bind-poly print print_i1)
(bind-poly print print_i8)
(bind-poly print print_i32)
(bind-poly print print_i64)
(bind-poly print print_f)
(bind-poly print print_d)


;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; support for zcopy

(bind-func zcopy_i1
  (lambda (x:i1 fromz:mzone* toz:mzone*) x))

(bind-func zcopy_i8
  (lambda (x:i8 fromz:mzone* toz:mzone*) x))

(bind-func zcopy_i32
  (lambda (x:i32 fromz:mzone* toz:mzone*) x))

(bind-func zcopy_i64
  (lambda (x:i64 fromz:mzone* toz:mzone*) x))

(bind-func zcopy_f
  (lambda (x:float fromz:mzone* toz:mzone*) x))

(bind-func zcopy_d
  (lambda (x:double fromz:mzone* toz:mzone*) x))

(bind-poly zcopy zcopy_i1)
(bind-poly zcopy zcopy_i8)
(bind-poly zcopy zcopy_i32)
(bind-poly zcopy zcopy_i64)
(bind-poly zcopy zcopy_f)
(bind-poly zcopy zcopy_d)

;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; XTLang strings

(bind-type String <size_t,i8*>)


;; override default constructors
(bind-func String
  (lambda (lgth s)
    (let ((news:i8* (zalloc lgth))
          (str:String* (zalloc)))
      (strcpy news s)
      (tset! str 0 lgth)
      (tset! str 1 news)
      str)))

(bind-func String_h
  (lambda (lgth s)
    (let ((news:i8* (halloc lgth))
          (str:String* (halloc)))
      (strcpy news s)
      (tset! str 0 lgth)
      (tset! str 1 news)
      str)))

;; must be a Halloced string!
(bind-func Delete_String
  (lambda (str:String*)
    (free (tref str 1))
    (free str)
    void))


;; String printing!
(bind-func String_print:[void,String*]*
  (lambda (x)
    (if (null? x)
        (begin (printf "")
               void)
        (begin (printf "'%s'" (tref x 1))
               void))))

(bind-poly print String_print)

;; lenght of string is the current
;; length of the cstr within string
(bind-func string_length
  (lambda (str:String*)
    (strlen (tref str 1))))

;; size of string is the total allowable
;; buffer size for string, which can be
;; larger than (string_length)
(bind-func string_size
  (lambda (str:String*)
    (tref str 0)))

(bind-func string_cstr
  (lambda (str:String*)
    (tref str 1)))

(bind-func cstr_from_string
  (lambda (str:String*)
    (tref str 1)))

(bind-func cstr_length
  (lambda (str:String*)
    (strlen (tref str 1))))

;; create easy Data constructors from CStrings
(bind-func Str_cptr
  (lambda (s)
    (let ((lgth (strlen s))
          (str (String lgth s)))
      str)))

(bind-func Str_string
  (lambda (s:String*)
    (let ((lgth (string_length s))
          (str (String lgth (string_cstr s))))
      str)))

(bind-poly Str Str_cptr)
(bind-poly Str Str_string)

(bind-func Str_h_cptr
  (lambda (s)
    (let ((lgth (strlen s))
          (str (String_h lgth s)))
      str)))

(bind-func Str_h_string
  (lambda (s:String*)
    (let ((lgth (string_length s))
          (str (String_h lgth (string_cstr s))))
      str)))

(bind-poly Str_h Str_h_cptr)
(bind-poly Str_h Str_h_string)

(bind-func string_cat
  (lambda (s1:String* s2:String*)
    (if (null? s2) (Str s1)
        (if (null? s1) (Str s2)
            (let ((size (+ (tref s1 0) (tref s2 0)))
                  (news:i8* (zalloc size)))
              (strcpy news (tref s1 1))
              (strncat news (tref s2 1) size)
              (Str news))))))

(bind-func string_cat_h
  (lambda (s1:String* s2:String*)
    (if (null? s2) (Str s1)
        (if (null? s1) (Str s2)
            (let ((size (+ (tref s1 0) (tref s2 0)))
                  (news:i8* (zalloc size)))
              (strcpy news (tref s1 1))
              (strncat news (tref s2 1) size)
              (Str_h news))))))

(bind-func string_cmp
  (lambda (s1:String* s2:String*)
    (if (= (strcmp (tref s1 1) (tref s2 1)) 0)
        #t #f)))

;; bind to eq
(bind-poly equal string_cmp)

;; levenshtein edit distance
(bind-func string_levenshtein
  (lambda (s:String* t:String*)
    (let ((i 0) (j 0)
          ;; column-major indexing closure
          (s_cstr (cstr_from_string s))
          (slen:size_t (string_size s))
          (t_cstr (cstr_from_string t))
          (tlen:size_t (string_size t))
          (row:i64* (salloc (+ slen 1)))
          (prev_row:i64* (salloc (+ slen 1)))
          (min3 (lambda (a:i64 b c)
                  (if (< a b)
                      (if (< a c)
                          a c)
                      (if (< b c)
                          b c)))))
      (dotimes (i (+ tlen 1))
        (pset! prev_row i i))
      (dotimes (i slen)
        (pset! row 0 (+ i 1))
        (dotimes (j tlen)
          (pset! row (+ j 1)
                 (min3 (+ (pref row j) 1)
                       (+ 1 (pref prev_row (+ j 1)))
                       (+ (pref prev_row j)
                          (if (= (pref s_cstr j)
                                 (pref t_cstr i))
                              0 1)))))
        (let ((tmp_row:i64* null))
          (set! tmp_row prev_row)
          (set! prev_row row)
          (set! row tmp_row)))
      (pref prev_row tlen))))

(bind-func string_similarity
  (lambda (s:String* t:String*)
    (/ 1.0 (i64tod (+ 1 (string_levenshtein s t))))))



;;;;;;;;;;;;;;;;;;;;;;;
;;
;; formatting!
;;
;; same as print but returns string
;; should REPLACE PRINT!

;; prints a line break
(bind-func str_format_return
  (lambda ()
    (let ((str:i8* (salloc 256)))
      (llvm_sprintf str "\n")
      (Str str))))

;; prints a space
(bind-func str_format_space
  (lambda ()
    (Str " ")))

(bind-func str_format_i1
  (lambda (x:i1)
    (let ((str:i8* (salloc 256)))
      (llvm_sprintf str "%d" x)
      (Str str))))

(bind-func str_format_i8
  (lambda (x:i8)
    (let ((str:i8* (salloc 256)))
      (llvm_sprintf str "%d" x)
      (Str str))))

(bind-func str_format_i32
  (lambda (x:i32)
    (let ((str:i8* (salloc 256)))    
      (llvm_sprintf str "%d" x)
      (Str str))))

(bind-func str_format_i64
  (lambda (x:i64)
    (let ((str:i8* (salloc 256)))    
      (llvm_sprintf str "%lld" x)
      (Str str))))

(bind-func str_format_f
  (lambda (x:float)
    (let ((str:i8* (salloc 256)))
      (llvm_sprintf str "%f" (ftod x))
      (Str str))))

(bind-func str_format_d
  (lambda (x:double)
    (let ((str:i8* (salloc 256)))      
      (llvm_sprintf str "%f" x)
      (Str str))))

(bind-poly str_format str_format_i1)
(bind-poly str_format str_format_i8)
(bind-poly str_format str_format_i32)
(bind-poly str_format str_format_i64)
(bind-poly str_format str_format_f)
(bind-poly str_format str_format_d)

;; String formatting!
(bind-func String_format:[String*,String*]*
  (lambda (x) x))

(bind-poly str_format String_format)

;; some helpers for precomp stuff

(bind-func command
  (lambda (cmd:i8*)
    (system cmd)))

;; this just here to provide the scheme wrapper
(bind-func sys_getenv
  (lambda (var_name)
    (getenv var_name)))

(bind-func sys_setenv
  (lambda (var_name value replace_p)
    (setenv var_name value replace_p)))

(bind-func sys_unsetenv
  (lambda (var_name)
    (unsetenv var_name)))

(bind-func get_llvm_path
  (lambda ()
    (let ((path_from_env (getenv "EXT_LLVM_DIR")))
      (if (not (null? path_from_env))
          path_from_env
          ;; check if homebrewed version (in default Cellar location)
          ;; exists - need to keep the version up-to-date by hand
          ;;
          ;; OSX
          (if (= (command "[ -d /usr/local/Cellar/extempore-llvm/3.4.1 ]") 0)
              "/usr/local/Cellar/extempore-llvm/3.4.1"
              ;; Linux
              (if (= (command "[ -d ~/.linuxbrew/Cellar/extempore-llvm/3.4.1 ]") 0)
                  "~/.linuxbrew/Cellar/extempore-llvm/3.4.1"
                  path_from_env)
              path_from_env)))))


;; (sys:load "libs/core/adt.xtm")

;; (suppress-compiler-messages #f)


;; load the scheme macros (e.g. define-instrument)
(sys:load "libs/core/std-scm.xtm")
;; make sure we load them with precompiled code as well
(sys:precomp:insert-sexp
 '(sys:load "libs/core/std-scm.xtm"))

(define *xtmlib-std-loaded* #t)

(sys:precomp:insert-footer "xtmstd")
