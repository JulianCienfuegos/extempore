;;; std-scm.xtm -- scheme code for libs/core/instruments.xtm library

;; Author: Andrew Sorensen
;; Keywords: extempore
;; Required dylibs:

;;; Commentary:

;;; Code:

(set_float_nans_)

;; generics here for catchall!
(bind-func print:[void,!a]
  (lambda (x) (printf "_") void))

;;;;;;;;;;;;;;;;;;;;;;
;;
;; catch all * zcopy
;;
(bind-func zcopy:[!a,!a,mzone*,mzone*]*
  (lambda (x fromz toz)
    (if (llvm_ptr_in_zone fromz (convert x))
        (let ((size (llvm_zone_ptr_size (convert x)))
              (newdat (convert (llvm_zone_malloc (llvm_peek_zone_stack) size))))
          (memcpy (convert newdat) (convert x) size)
          newdat)
        x)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; equality

;; this is the catch-all for equality testing
;; covers all numeric types
;; will also catch all for all pointer types
;; which compares against memory address
;; otherwise expect poly override
;;
;; i.e. see string below
(bind-func equal:[bool,!a,!b]*
  "Basic equality check"
  (lambda (a b)
    (= a b)))

(define-macro (xtm-dump-ir fname)
  (let ((n (llvm:get-closure-work-name (symbol->string fname))))
    (if n
        `(llvm:print-function ,n)
        `(begin (println "No such XTM function") #f))))
  

(define-macro (xtmX expr)
  (suppress-compiler-messages #t)
  (eval `(bind-func xtm_expression
           (lambda ()
             ,expr
             void))
        (interaction-environment))
  (suppress-compiler-messages #f)
  (xtm_expression))                       

;; some scheme helpers for acessing the environment

(define sys:get-env
  (lambda (var-name)
    (let ((res (cptr->string (sys_getenv var-name))))
      (if (string=? res "")
          #f
          res))))

(define sys:set-env
  (lambda (var-name value replace?)
    (if (and (string? var-name)
             (string? value)
             (boolean? replace?))
        (let ((res (sys_setenv var-name value (if replace? 1 0))))
          (if (<> res 0)
              #f
              #t))
        (begin (print-with-colors 'red 'default #t (print "Error"))
               (print ": var-name and value must be strings, replace must be boolean\n")
               #f))))

(define sys:unset-env
  (lambda (var-name)
    (if (string? var-name)
        (let ((res (sys_unsetenv var-name)))
          (if (<> res 0) #f #t))
        (begin (print-with-colors 'red 'default #t (print "Error"))
               (print ": var-name must be a string\n")
               #f))))
